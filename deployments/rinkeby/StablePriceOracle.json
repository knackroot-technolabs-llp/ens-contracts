{
  "address": "0x0390a8FBA052Be87596aB8DA538B245e1Ed63Bb8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPriceEstimator",
          "name": "_priceEstimator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFeeInDWEBToken",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "dWebTokenAddress",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceEstimator",
      "outputs": [
        {
          "internalType": "contract IPriceEstimator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceEstimator",
          "name": "_priceEstimator",
          "type": "address"
        }
      ],
      "name": "setPriceEstimator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60a2db656ee1d05a783ff051c00c0e3dc177fcfe83941f67ab950a85bd361d68",
  "receipt": {
    "to": null,
    "from": "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    "contractAddress": "0x0390a8FBA052Be87596aB8DA538B245e1Ed63Bb8",
    "transactionIndex": 38,
    "gasUsed": "1826239",
    "logsBloom": "0x
    "blockHash": "0x57aaf9ca3dda7246d09c3425694ee9889bec1ef58d41d3cfd9a9a044996bf82e",
    "transactionHash": "0x60a2db656ee1d05a783ff051c00c0e3dc177fcfe83941f67ab950a85bd361d68",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 9251778,
        "transactionHash": "0x60a2db656ee1d05a783ff051c00c0e3dc177fcfe83941f67ab950a85bd361d68",
        "address": "0x0390a8FBA052Be87596aB8DA538B245e1Ed63Bb8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cebbdbbdfe8a1bb3f62a75b5fe9ebae5d105f8f"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x57aaf9ca3dda7246d09c3425694ee9889bec1ef58d41d3cfd9a9a044996bf82e"
      },
      {
        "transactionIndex": 38,
        "blockNumber": 9251778,
        "transactionHash": "0x60a2db656ee1d05a783ff051c00c0e3dc177fcfe83941f67ab950a85bd361d68",
        "address": "0x0390a8FBA052Be87596aB8DA538B245e1Ed63Bb8",
        "topics": [
          "0x73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000047868c000000000000000000000000000000000000000000000000000000000002625a00",
        "logIndex": 76,
        "blockHash": "0x57aaf9ca3dda7246d09c3425694ee9889bec1ef58d41d3cfd9a9a044996bf82e"
      }
    ],
    "blockNumber": 9251778,
    "cumulativeGasUsed": "10756134",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4faF01d7A1c2BA04b63c126fEfF4e1ecbA21d205",
    "0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad",
    [
      5000000000,
      1200000000,
      40000000
    ]
  ],
  "solcInputHash": "8acfa5d5fc60624983e398adee1f7112",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPriceEstimator\",\"name\":\"_priceEstimator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeInDWEBToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"dWebTokenAddress\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceEstimator\",\"outputs\":[{\"internalType\":\"contract IPriceEstimator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceEstimator\",\"name\":\"_priceEstimator\",\"type\":\"address\"}],\"name\":\"setPriceEstimator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256,bool,address)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"The price of this renewal or registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPriceEstimator(address)\":{\"details\":\"Sets the price oracle address\",\"params\":{\"_priceEstimator\":\"The address of the price estimator to use.\"}},\"setPrices(uint256[])\":{\"details\":\"Sets rent prices.\",\"params\":{\"_rentPrices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracle.sol\":\"StablePriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/decentraname/IERC20Extended.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IERC20Extended {\\n    function decimals() external view returns (uint8);\\n    function burnFrom(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0xfb1720737dc38ee91ce4246e73dee2d480f576f2422ed6da8f22f439de4146ad\"},\"contracts/ethregistrar/IPriceEstimator.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IPriceEstimator {\\n    function getEstimatedETHforERC20(\\n        uint256 erc20Amount,\\n        address token\\n    ) external view returns (uint256[] memory);\\n\\n    function getEstimatedERC20forETH(\\n        uint256 etherAmountInWei,\\n        address tokenAddress\\n    ) external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x5df010f4a41466686ddcaab83270fd3a165d173c4440e11941a0a30603529a36\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface PriceOracle {\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return The price of this renewal or registration, in wei.\\n     */\\n    function price(string calldata name, uint expires, uint duration, bool isFeeInDWEBToken, address dWebTokenAddress) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xb338fb6fcb712b1f9a74c4ebd4299d3b103184d8d496ee0d61d7363e346689eb\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../decentraname/IERC20Extended.sol\\\";\\nimport \\\"./IPriceEstimator.sol\\\";\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is Ownable, PriceOracle {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\\n    // price in USDT (USD * 1e6)\\n    // price is of 1 year\\n    uint[] public rentPrices;\\n\\n    // Oracle address\\n    IPriceEstimator public priceEstimator;\\n\\n    // actual value in the format val * 1e-1  e.g. set value 3 for 0.3\\n    uint256 private uniswapFeePercentage;\\n\\n    address private usdTokenAddress;\\n\\n    //event OracleChanged(address oracle);\\n\\n    event RentPriceChanged(uint[] prices);\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\\\"price(string,uint256,uint256)\\\") ^ keccak256(\\\"premium(string,uint256,uint256)\\\"));\\n\\n    constructor(IPriceEstimator _priceEstimator, address _usdTokenAddress, uint[] memory _rentPrices) public {\\n        priceEstimator = _priceEstimator;\\n        usdTokenAddress = _usdTokenAddress;\\n        setPrices(_rentPrices);\\n    }\\n\\n    // returns price in wei or ERC20 token decimal\\n    function price(string calldata name, uint expires, uint duration, bool isFeeInDWEBToken, address dWebTokenAddress) external view override returns(uint256) {\\n        uint len = name.strlen();\\n        if(len > rentPrices.length) {\\n            len = rentPrices.length;\\n        }\\n        require(len > 0);\\n        \\n        // convert duration from seconds to years since price is of 1 year\\n        uint basePrice = rentPrices[len - 1].mul(duration).div(31556926);\\n        basePrice = basePrice.add(_premium(name, expires, duration));\\n\\n        //return attoUSDToWei(basePrice);\\n\\n        uint256 minRequiredFee;\\n        if(isFeeInDWEBToken) {\\n            minRequiredFee = getFeesInDWEBToken(basePrice, dWebTokenAddress);\\n        } else {\\n            minRequiredFee = getFeesInWei(basePrice);\\n        }\\n        return minRequiredFee;\\n    }\\n\\n    /**\\n     * @dev Sets rent prices.\\n     * @param _rentPrices The price array. Each element corresponds to a specific\\n     *                    name length; names longer than the length of the array\\n     *                    default to the price of the last element. Values are\\n     *                    in base price units, equal to one attodollar (1e-18\\n     *                    dollar) each.\\n     */\\n    function setPrices(uint[] memory _rentPrices) public onlyOwner {\\n        rentPrices = _rentPrices;\\n        emit RentPriceChanged(_rentPrices);\\n    }\\n\\n    /**\\n     * @dev Sets the price oracle address\\n     * @param _priceEstimator The address of the price estimator to use.\\n     */\\n    function setPriceEstimator(IPriceEstimator _priceEstimator) public onlyOwner {\\n        priceEstimator = _priceEstimator;\\n        \\n        // TODO-event : event needs to be changed\\n        //emit OracleChanged(address(_usdOracle));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(string calldata name, uint expires, uint duration) external view returns(uint) {\\n        // TODO-enhancement: may need to convert the returned price\\n        return _premium(name, expires, duration);\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(string memory name, uint expires, uint duration) virtual internal view returns(uint) {\\n        return 0;\\n    }\\n\\n    // function attoUSDToWei(uint amount) internal view returns(uint) {\\n    //     uint ethPrice = uint(usdOracle.latestAnswer());\\n    //     return amount.mul(1e8).div(ethPrice);\\n    // }\\n\\n    // function weiToAttoUSD(uint amount) internal view returns(uint) {\\n    //     uint ethPrice = uint(usdOracle.latestAnswer());\\n    //     return amount.mul(ethPrice).div(1e8);\\n    //}\\n\\n    function getFeesInDWEBToken(uint basePrice, address dWebToken) internal view returns (uint256) {\\n        uint256 feesInWei = getFeesInWei(basePrice);\\n        \\n        // 50% discount in dweb\\n        uint256 feesInWeiIfPaidViaDWEB = feesInWei.div(2);\\n        // convert wei to dweb decimal\\n        uint256 dwebPerEth = priceEstimator.getEstimatedERC20forETH(1, dWebToken)[0];\\n        //subtract uniswap 0.30% fees\\n        // TODO: see if returned price is included 0.3% or not\\n        uint256 estDWEBPerEth = dwebPerEth.sub(dwebPerEth.mul(uniswapFeePercentage).div(1000));\\n\\n        // fees in dweb token\\n        return feesInWeiIfPaidViaDWEB.mul(estDWEBPerEth);\\n    }\\n    \\n    function getFeesInWei(uint basePrice) internal view returns (uint256) {\\n        //price should be estimated by 1 token because Uniswap algo changes price based on large amount\\n        uint256 tokenBits = 10 ** uint256(IERC20Extended(usdTokenAddress).decimals()); // 1e6 for USDT\\n        uint256 estFeesInWeiPerUnit = priceEstimator.getEstimatedETHforERC20(tokenBits, usdTokenAddress)[0];\\n        //subtract uniswap 0.30% fees\\n        //uniswapFeePercentage is a percentage expressed in 1/10 (a tenth) of a percent hence we divide by 1000\\n        estFeesInWeiPerUnit = estFeesInWeiPerUnit.sub(estFeesInWeiPerUnit.mul(uniswapFeePercentage).div(1000));\\n\\n        // fees in wei \\n        return basePrice.mul(estFeesInWeiPerUnit).div(tokenBits);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xe7597b41483e8370f0544d49290be120c18a68c108b90f636dab19b1188e21f1\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009d5760003560e01c80638da5cb5b116100665780638da5cb5b14610144578063a34e359614610162578063b5d93ba914610192578063e3f1bc2b146101c2578063f2fde38b146101e05761009d565b806245a3d7146100a257806301ffc9a7146100be57806306d5d0b6146100ee578063715018a61461011e57806379cf92d314610128575b600080fd5b6100bc60048036038101906100b791906112bd565b6101fc565b005b6100d860048036038101906100d39190611294565b6102bc565b6040516100e59190611589565b60405180910390f35b610108600480360381019061010391906113e4565b6103b0565b6040516101159190611628565b60405180910390f35b6101266103d4565b005b610142600480360381019061013d9190611212565b61045c565b005b61014c610529565b604051610159919061154c565b60405180910390f35b61017c600480360381019061017791906112e6565b610552565b6040516101899190611628565b60405180910390f35b6101ac60048036038101906101a79190611352565b6105ad565b6040516101b99190611628565b60405180910390f35b6101ca610736565b6040516101d791906115a4565b60405180910390f35b6101fa60048036038101906101f591906111e9565b61075c565b005b610204610854565b73ffffffffffffffffffffffffffffffffffffffff16610222610529565b73ffffffffffffffffffffffffffffffffffffffff1614610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026f90611608565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103a957507fa34e3596c835a2bb0c76af3bc7896686f9d9abbb37ea27272246c0e9dab761c57f50e9a715a506f81ba3cfca69197fa8231c19274521697ca4e52316238d69d8a9187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600181815481106103c057600080fd5b906000526020600020016000915090505481565b6103dc610854565b73ffffffffffffffffffffffffffffffffffffffff166103fa610529565b73ffffffffffffffffffffffffffffffffffffffff1614610450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044790611608565b60405180910390fd5b61045a600061085c565b565b610464610854565b73ffffffffffffffffffffffffffffffffffffffff16610482610529565b73ffffffffffffffffffffffffffffffffffffffff16146104d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cf90611608565b60405180910390fd5b80600190805190602001906104ee929190610f76565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df8160405161051e9190611567565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006105a385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508484610920565b9050949350505050565b6000806105fd88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610929565b90506001805490508111156106155760018054905090505b6000811161062257600080fd5b600061069c6301e1853e61068e886001808761063e9190611959565b81548110610675577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154610b0490919063ffffffff16565b610b4990919063ffffffff16565b90506106ff6106f08a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508989610920565b82610b7190919063ffffffff16565b90506000851561071a576107138286610b99565b9050610726565b61072382610d15565b90505b8093505050509695505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610764610854565b73ffffffffffffffffffffffffffffffffffffffff16610782610529565b73ffffffffffffffffffffffffffffffffffffffff16146107d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cf90611608565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f906115e8565b60405180910390fd5b6108518161085c565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60009392505050565b60008060008084519050600092505b80821015610af957600085838151811061097b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109ca576001836109c39190611707565b9250610ae5565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610a0c57600283610a059190611707565b9250610ae4565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610a4e57600383610a479190611707565b9250610ae3565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610a8f57600483610a889190611707565b9250610ae2565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610ad157600583610aca9190611707565b9250610ae1565b600683610ade9190611707565b92505b5b5b5b5b508280610af190611a87565b935050610938565b829350505050919050565b600080831415610b175760009050610b43565b60008284610b2591906118ff565b9050828482610b34919061175d565b14610b3e57600080fd5b809150505b92915050565b6000808211610b5757600080fd5b60008284610b65919061175d565b90508091505092915050565b6000808284610b809190611707565b905083811015610b8f57600080fd5b8091505092915050565b600080610ba584610d15565b90506000610bbd600283610b4990919063ffffffff16565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea498ade6001876040518363ffffffff1660e01b8152600401610c1f9291906115bf565b60006040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c749190611253565b600081518110610cad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000610cf4610ce56103e8610cd760035486610b0490919063ffffffff16565b610b4990919063ffffffff16565b83610f4d90919063ffffffff16565b9050610d098184610b0490919063ffffffff16565b94505050505092915050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8057600080fd5b505afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db8919061140d565b60ff16600a610dc791906117e1565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350a2394583600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610e4a929190611643565b60006040518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e9f9190611253565b600081518110610ed8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050610f1d610f0e6103e8610f0060035485610b0490919063ffffffff16565b610b4990919063ffffffff16565b82610f4d90919063ffffffff16565b9050610f4482610f368387610b0490919063ffffffff16565b610b4990919063ffffffff16565b92505050919050565b600082821115610f5c57600080fd5b60008284610f6a9190611959565b90508091505092915050565b828054828255906000526020600020908101928215610fb2579160200282015b82811115610fb1578251825591602001919060010190610f96565b5b509050610fbf9190610fc3565b5090565b5b80821115610fdc576000816000905550600101610fc4565b5090565b6000610ff3610fee84611691565b61166c565b9050808382526020820190508285602086028201111561101257600080fd5b60005b85811015611042578161102888826111aa565b845260208401935060208301925050600181019050611015565b5050509392505050565b600061105f61105a84611691565b61166c565b9050808382526020820190508285602086028201111561107e57600080fd5b60005b858110156110ae578161109488826111bf565b845260208401935060208301925050600181019050611081565b5050509392505050565b6000813590506110c781611bf3565b92915050565b600082601f8301126110de57600080fd5b81356110ee848260208601610fe0565b91505092915050565b600082601f83011261110857600080fd5b815161111884826020860161104c565b91505092915050565b60008135905061113081611c0a565b92915050565b60008135905061114581611c21565b92915050565b60008135905061115a81611c38565b92915050565b60008083601f84011261117257600080fd5b8235905067ffffffffffffffff81111561118b57600080fd5b6020830191508360018202830111156111a357600080fd5b9250929050565b6000813590506111b981611c4f565b92915050565b6000815190506111ce81611c4f565b92915050565b6000815190506111e381611c66565b92915050565b6000602082840312156111fb57600080fd5b6000611209848285016110b8565b91505092915050565b60006020828403121561122457600080fd5b600082013567ffffffffffffffff81111561123e57600080fd5b61124a848285016110cd565b91505092915050565b60006020828403121561126557600080fd5b600082015167ffffffffffffffff81111561127f57600080fd5b61128b848285016110f7565b91505092915050565b6000602082840312156112a657600080fd5b60006112b484828501611136565b91505092915050565b6000602082840312156112cf57600080fd5b60006112dd8482850161114b565b91505092915050565b600080600080606085870312156112fc57600080fd5b600085013567ffffffffffffffff81111561131657600080fd5b61132287828801611160565b94509450506020611335878288016111aa565b9250506040611346878288016111aa565b91505092959194509250565b60008060008060008060a0878903121561136b57600080fd5b600087013567ffffffffffffffff81111561138557600080fd5b61139189828a01611160565b965096505060206113a489828a016111aa565b94505060406113b589828a016111aa565b93505060606113c689828a01611121565b92505060806113d789828a016110b8565b9150509295509295509295565b6000602082840312156113f657600080fd5b6000611404848285016111aa565b91505092915050565b60006020828403121561141f57600080fd5b600061142d848285016111d4565b91505092915050565b6000611442838361152e565b60208301905092915050565b6114578161198d565b82525050565b6000611468826116cd565b61147281856116e5565b935061147d836116bd565b8060005b838110156114ae5781516114958882611436565b97506114a0836116d8565b925050600181019050611481565b5085935050505092915050565b6114c48161199f565b82525050565b6114d381611a20565b82525050565b6114e281611a44565b82525050565b60006114f56026836116f6565b915061150082611b7b565b604082019050919050565b60006115186020836116f6565b915061152382611bca565b602082019050919050565b61153781611a09565b82525050565b61154681611a09565b82525050565b6000602082019050611561600083018461144e565b92915050565b60006020820190508181036000830152611581818461145d565b905092915050565b600060208201905061159e60008301846114bb565b92915050565b60006020820190506115b960008301846114ca565b92915050565b60006040820190506115d460008301856114d9565b6115e1602083018461144e565b9392505050565b60006020820190508181036000830152611601816114e8565b9050919050565b600060208201905081810360008301526116218161150b565b9050919050565b600060208201905061163d600083018461153d565b92915050565b6000604082019050611658600083018561153d565b611665602083018461144e565b9392505050565b6000611676611687565b90506116828282611a56565b919050565b6000604051905090565b600067ffffffffffffffff8211156116ac576116ab611b2e565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061171282611a09565b915061171d83611a09565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561175257611751611ad0565b5b828201905092915050565b600061176882611a09565b915061177383611a09565b92508261178357611782611aff565b5b828204905092915050565b6000808291508390505b60018511156117d8578086048111156117b4576117b3611ad0565b5b60018516156117c35780820291505b80810290506117d185611b6e565b9450611798565b94509492505050565b60006117ec82611a09565b91506117f783611a09565b92506118247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461182c565b905092915050565b60008261183c57600190506118f8565b8161184a57600090506118f8565b8160018114611860576002811461186a57611899565b60019150506118f8565b60ff84111561187c5761187b611ad0565b5b8360020a91508482111561189357611892611ad0565b5b506118f8565b5060208310610133831016604e8410600b84101617156118ce5782820a9050838111156118c9576118c8611ad0565b5b6118f8565b6118db848484600161178e565b925090508184048111156118f2576118f1611ad0565b5b81810290505b9392505050565b600061190a82611a09565b915061191583611a09565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561194e5761194d611ad0565b5b828202905092915050565b600061196482611a09565b915061196f83611a09565b92508282101561198257611981611ad0565b5b828203905092915050565b6000611998826119e9565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006119e28261198d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611a2b82611a32565b9050919050565b6000611a3d826119e9565b9050919050565b6000611a4f82611a09565b9050919050565b611a5f82611b5d565b810181811067ffffffffffffffff82111715611a7e57611a7d611b2e565b5b80604052505050565b6000611a9282611a09565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ac557611ac4611ad0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b611bfc8161198d565b8114611c0757600080fd5b50565b611c138161199f565b8114611c1e57600080fd5b50565b611c2a816119ab565b8114611c3557600080fd5b50565b611c41816119d7565b8114611c4c57600080fd5b50565b611c5881611a09565b8114611c6357600080fd5b50565b611c6f81611a13565b8114611c7a57600080fd5b5056fea26469706673582212206e2129ada74b9eb1bd6bcfc0391fe7cde8e61d9bb5c1be7ffa01b5e52480fea964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256,bool,address)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "The price of this renewal or registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPriceEstimator(address)": {
        "details": "Sets the price oracle address",
        "params": {
          "_priceEstimator": "The address of the price estimator to use."
        }
      },
      "setPrices(uint256[])": {
        "details": "Sets rent prices.",
        "params": {
          "_rentPrices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 760,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15421,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "rentPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 15424,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "priceEstimator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceEstimator)14030"
      },
      {
        "astId": 15426,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "uniswapFeePercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15428,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "usdTokenAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IPriceEstimator)14030": {
        "encoding": "inplace",
        "label": "contract IPriceEstimator",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}