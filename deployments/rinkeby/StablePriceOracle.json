{
  "address": "0x86E8f9363e799D8CCF21c92dc2cdaBAe399134F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x89b1b15c1b29ce91a3b778cc012b7ad66bc1ea43faad51c8b780dd619b83d32a",
  "receipt": {
    "to": null,
    "from": "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    "contractAddress": "0x86E8f9363e799D8CCF21c92dc2cdaBAe399134F3",
    "transactionIndex": 42,
    "gasUsed": "1437214",
    "logsBloom": "0x
    "blockHash": "0xadc3bf6440c62ddf0613108ee9831b7cfe9ded17a562d193889d73813932cfe1",
    "transactionHash": "0x89b1b15c1b29ce91a3b778cc012b7ad66bc1ea43faad51c8b780dd619b83d32a",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 9206703,
        "transactionHash": "0x89b1b15c1b29ce91a3b778cc012b7ad66bc1ea43faad51c8b780dd619b83d32a",
        "address": "0x86E8f9363e799D8CCF21c92dc2cdaBAe399134F3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cebbdbbdfe8a1bb3f62a75b5fe9ebae5d105f8f"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0xadc3bf6440c62ddf0613108ee9831b7cfe9ded17a562d193889d73813932cfe1"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 9206703,
        "transactionHash": "0x89b1b15c1b29ce91a3b778cc012b7ad66bc1ea43faad51c8b780dd619b83d32a",
        "address": "0x86E8f9363e799D8CCF21c92dc2cdaBAe399134F3",
        "topics": [
          "0x73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000001d4c00000000000000000000000000000000000000000000000000000000000000fa0",
        "logIndex": 46,
        "blockHash": "0xadc3bf6440c62ddf0613108ee9831b7cfe9ded17a562d193889d73813932cfe1"
      }
    ],
    "blockNumber": 9206703,
    "cumulativeGasUsed": "8407358",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xac98ae75daa00ddc1996ad3a87135c19c346ce81",
    [
      500000,
      120000,
      4000
    ]
  ],
  "solcInputHash": "0b79b25cb1900741c41640500f9b6f57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"The price of this renewal or registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOracle(address)\":{\"details\":\"Sets the price oracle address\",\"params\":{\"_usdOracle\":\"The address of the price oracle to use.\"}},\"setPrices(uint256[])\":{\"details\":\"Sets rent prices.\",\"params\":{\"_rentPrices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracle.sol\":\"StablePriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface PriceOracle {\\r\\n    /**\\r\\n     * @dev Returns the price to register or renew a name.\\r\\n     * @param name The name being registered or renewed.\\r\\n     * @param expires When the name presently expires (0 if this is a new registration).\\r\\n     * @param duration How long the name is being registered or extended for, in seconds.\\r\\n     * @return The price of this renewal or registration, in wei.\\r\\n     */\\r\\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x26d8ee2ae9ac3f030b849d97192ba5aef238d8708d2a4a236af19c79fdc5b92d\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Unsigned math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n    */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\\n    */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two unsigned integers, reverts on overflow.\\r\\n    */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n    * reverts when dividing by zero.\\r\\n    */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeabc03e4451be8c50dce99b4f7256ac848fcaf4f0478e4f664724752001a8645\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./StringUtils.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface AggregatorInterface {\\r\\n  function latestAnswer() external view returns (int256);\\r\\n}\\r\\n\\r\\n\\r\\n// StablePriceOracle sets a price in USD, based on an oracle.\\r\\ncontract StablePriceOracle is Ownable, PriceOracle {\\r\\n    using SafeMath for *;\\r\\n    using StringUtils for *;\\r\\n\\r\\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\\r\\n    uint[] public rentPrices;\\r\\n\\r\\n    // Oracle address\\r\\n    AggregatorInterface public usdOracle;\\r\\n\\r\\n    event OracleChanged(address oracle);\\r\\n\\r\\n    event RentPriceChanged(uint[] prices);\\r\\n\\r\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\\\"price(string,uint256,uint256)\\\") ^ keccak256(\\\"premium(string,uint256,uint256)\\\"));\\r\\n\\r\\n    constructor(AggregatorInterface _usdOracle, uint[] memory _rentPrices) public {\\r\\n        usdOracle = _usdOracle;\\r\\n        setPrices(_rentPrices);\\r\\n    }\\r\\n\\r\\n    function price(string calldata name, uint expires, uint duration) external view override returns(uint) {\\r\\n        uint len = name.strlen();\\r\\n        if(len > rentPrices.length) {\\r\\n            len = rentPrices.length;\\r\\n        }\\r\\n        require(len > 0);\\r\\n        \\r\\n        uint basePrice = rentPrices[len - 1].mul(duration);\\r\\n        basePrice = basePrice.add(_premium(name, expires, duration));\\r\\n\\r\\n        return attoUSDToWei(basePrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets rent prices.\\r\\n     * @param _rentPrices The price array. Each element corresponds to a specific\\r\\n     *                    name length; names longer than the length of the array\\r\\n     *                    default to the price of the last element. Values are\\r\\n     *                    in base price units, equal to one attodollar (1e-18\\r\\n     *                    dollar) each.\\r\\n     */\\r\\n    function setPrices(uint[] memory _rentPrices) public onlyOwner {\\r\\n        rentPrices = _rentPrices;\\r\\n        emit RentPriceChanged(_rentPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the price oracle address\\r\\n     * @param _usdOracle The address of the price oracle to use.\\r\\n     */\\r\\n    function setOracle(AggregatorInterface _usdOracle) public onlyOwner {\\r\\n        usdOracle = _usdOracle;\\r\\n        emit OracleChanged(address(_usdOracle));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the pricing premium in wei.\\r\\n     */\\r\\n    function premium(string calldata name, uint expires, uint duration) external view returns(uint) {\\r\\n        return attoUSDToWei(_premium(name, expires, duration));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the pricing premium in internal base units.\\r\\n     */\\r\\n    function _premium(string memory name, uint expires, uint duration) virtual internal view returns(uint) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function attoUSDToWei(uint amount) internal view returns(uint) {\\r\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\r\\n        return amount.mul(1e8).div(ethPrice);\\r\\n    }\\r\\n\\r\\n    function weiToAttoUSD(uint amount) internal view returns(uint) {\\r\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\r\\n        return amount.mul(ethPrice).div(1e8);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\\r\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b2095f18b17be5cf5db2430c89687f536f51c10b3cf6072fbbfc0ca2fe0ea97\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nlibrary StringUtils {\\r\\n    /**\\r\\n     * @dev Returns the length of a given string\\r\\n     *\\r\\n     * @param s The string to measure the length of\\r\\n     * @return The length of the input string\\r\\n     */\\r\\n    function strlen(string memory s) internal pure returns (uint) {\\r\\n        uint len;\\r\\n        uint i = 0;\\r\\n        uint bytelength = bytes(s).length;\\r\\n        for(len = 0; i < bytelength; len++) {\\r\\n            bytes1 b = bytes(s)[i];\\r\\n            if(b < 0x80) {\\r\\n                i += 1;\\r\\n            } else if (b < 0xE0) {\\r\\n                i += 2;\\r\\n            } else if (b < 0xF0) {\\r\\n                i += 3;\\r\\n            } else if (b < 0xF8) {\\r\\n                i += 4;\\r\\n            } else if (b < 0xFC) {\\r\\n                i += 5;\\r\\n            } else {\\r\\n                i += 6;\\r\\n            }\\r\\n        }\\r\\n        return len;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c474dd4b3d08792ffeb596fce9b9fd7a5aaff2bd31e61fcd873b3d9ac14d740\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637adbf973116100665780637adbf973146101595780638da5cb5b14610175578063a34e359614610193578063c8a4271f146101c3578063f2fde38b146101e15761009e565b806301ffc9a7146100a357806306d5d0b6146100d357806350e9a71514610103578063715018a61461013357806379cf92d31461013d575b600080fd5b6100bd60048036038101906100b89190610e96565b6101fd565b6040516100ca91906110ea565b60405180910390f35b6100ed60048036038101906100e89190610f7d565b6102f1565b6040516100fa9190611160565b60405180910390f35b61011d60048036038101906101189190610f11565b610315565b60405161012a9190611160565b60405180910390f35b61013b610468565b005b61015760048036038101906101529190610e55565b6104f0565b005b610173600480360381019061016e9190610ebf565b6105bd565b005b61017d6106b4565b60405161018a91906110ad565b60405180910390f35b6101ad60048036038101906101a89190610f11565b6106dd565b6040516101ba9190611160565b60405180910390f35b6101cb610740565b6040516101d89190611105565b60405180910390f35b6101fb60048036038101906101f69190610e2c565b610766565b005b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ea57507fa34e3596c835a2bb0c76af3bc7896686f9d9abbb37ea27272246c0e9dab761c57f50e9a715a506f81ba3cfca69197fa8231c19274521697ca4e52316238d69d8a9187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6001818154811061030157600080fd5b906000526020600020016000915090505481565b60008061036586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061085e565b905060018054905081111561037d5760018054905090505b6000811161038a57600080fd5b60006103ee846001808561039e91906112f7565b815481106103d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154610a3990919063ffffffff16565b905061045161044288888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508787610a7e565b82610a8790919063ffffffff16565b905061045c81610aaf565b92505050949350505050565b610470610b85565b73ffffffffffffffffffffffffffffffffffffffff1661048e6106b4565b73ffffffffffffffffffffffffffffffffffffffff16146104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90611140565b60405180910390fd5b6104ee6000610b8d565b565b6104f8610b85565b73ffffffffffffffffffffffffffffffffffffffff166105166106b4565b73ffffffffffffffffffffffffffffffffffffffff161461056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390611140565b60405180910390fd5b8060019080519060200190610582929190610c79565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df816040516105b291906110c8565b60405180910390a150565b6105c5610b85565b73ffffffffffffffffffffffffffffffffffffffff166105e36106b4565b73ffffffffffffffffffffffffffffffffffffffff1614610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090611140565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418816040516106a991906110ad565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061073661073186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508585610a7e565b610aaf565b9050949350505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61076e610b85565b73ffffffffffffffffffffffffffffffffffffffff1661078c6106b4565b73ffffffffffffffffffffffffffffffffffffffff16146107e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d990611140565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084990611120565b60405180910390fd5b61085b81610b8d565b50565b60008060008084519050600092505b80821015610a2e5760008583815181106108b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156108ff576001836108f89190611216565b9250610a1a565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109415760028361093a9190611216565b9250610a19565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109835760038361097c9190611216565b9250610a18565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109c4576004836109bd9190611216565b9250610a17565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610a06576005836109ff9190611216565b9250610a16565b600683610a139190611216565b92505b5b5b5b5b508280610a2690611410565b93505061086d565b829350505050919050565b600080831415610a4c5760009050610a78565b60008284610a5a919061129d565b9050828482610a69919061126c565b14610a7357600080fd5b809150505b92915050565b60009392505050565b6000808284610a969190611216565b905083811015610aa557600080fd5b8091505092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1a57600080fd5b505afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190610ee8565b9050610b7d81610b6f6305f5e10086610a3990919063ffffffff16565b610c5190919063ffffffff16565b915050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808211610c5f57600080fd5b60008284610c6d919061126c565b90508091505092915050565b828054828255906000526020600020908101928215610cb5579160200282015b82811115610cb4578251825591602001919060010190610c99565b5b509050610cc29190610cc6565b5090565b5b80821115610cdf576000816000905550600101610cc7565b5090565b6000610cf6610cf1846111a0565b61117b565b90508083825260208201905082856020860282011115610d1557600080fd5b60005b85811015610d455781610d2b8882610e17565b845260208401935060208301925050600181019050610d18565b5050509392505050565b600081359050610d5e8161156f565b92915050565b600082601f830112610d7557600080fd5b8135610d85848260208601610ce3565b91505092915050565b600081359050610d9d81611586565b92915050565b600081359050610db28161159d565b92915050565b600081519050610dc7816115b4565b92915050565b60008083601f840112610ddf57600080fd5b8235905067ffffffffffffffff811115610df857600080fd5b602083019150836001820283011115610e1057600080fd5b9250929050565b600081359050610e26816115cb565b92915050565b600060208284031215610e3e57600080fd5b6000610e4c84828501610d4f565b91505092915050565b600060208284031215610e6757600080fd5b600082013567ffffffffffffffff811115610e8157600080fd5b610e8d84828501610d64565b91505092915050565b600060208284031215610ea857600080fd5b6000610eb684828501610d8e565b91505092915050565b600060208284031215610ed157600080fd5b6000610edf84828501610da3565b91505092915050565b600060208284031215610efa57600080fd5b6000610f0884828501610db8565b91505092915050565b60008060008060608587031215610f2757600080fd5b600085013567ffffffffffffffff811115610f4157600080fd5b610f4d87828801610dcd565b94509450506020610f6087828801610e17565b9250506040610f7187828801610e17565b91505092959194509250565b600060208284031215610f8f57600080fd5b6000610f9d84828501610e17565b91505092915050565b6000610fb2838361108f565b60208301905092915050565b610fc78161132b565b82525050565b6000610fd8826111dc565b610fe281856111f4565b9350610fed836111cc565b8060005b8381101561101e5781516110058882610fa6565b9750611010836111e7565b925050600181019050610ff1565b5085935050505092915050565b6110348161133d565b82525050565b611043816113bb565b82525050565b6000611056602683611205565b9150611061826114f7565b604082019050919050565b6000611079602083611205565b915061108482611546565b602082019050919050565b611098816113b1565b82525050565b6110a7816113b1565b82525050565b60006020820190506110c26000830184610fbe565b92915050565b600060208201905081810360008301526110e28184610fcd565b905092915050565b60006020820190506110ff600083018461102b565b92915050565b600060208201905061111a600083018461103a565b92915050565b6000602082019050818103600083015261113981611049565b9050919050565b600060208201905081810360008301526111598161106c565b9050919050565b6000602082019050611175600083018461109e565b92915050565b6000611185611196565b905061119182826113df565b919050565b6000604051905090565b600067ffffffffffffffff8211156111bb576111ba6114b7565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611221826113b1565b915061122c836113b1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561126157611260611459565b5b828201905092915050565b6000611277826113b1565b9150611282836113b1565b92508261129257611291611488565b5b828204905092915050565b60006112a8826113b1565b91506112b3836113b1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112ec576112eb611459565b5b828202905092915050565b6000611302826113b1565b915061130d836113b1565b9250828210156113205761131f611459565b5b828203905092915050565b600061133682611391565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006113808261132b565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006113c6826113cd565b9050919050565b60006113d882611391565b9050919050565b6113e8826114e6565b810181811067ffffffffffffffff82111715611407576114066114b7565b5b80604052505050565b600061141b826113b1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561144e5761144d611459565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6115788161132b565b811461158357600080fd5b50565b61158f81611349565b811461159a57600080fd5b50565b6115a681611375565b81146115b157600080fd5b50565b6115bd81611387565b81146115c857600080fd5b50565b6115d4816113b1565b81146115df57600080fd5b5056fea26469706673582212209f96ce94b7829a6eb9f84176b84f93149b1bb5d4792cb5cb8a9fc376af181e5264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "The price of this renewal or registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOracle(address)": {
        "details": "Sets the price oracle address",
        "params": {
          "_usdOracle": "The address of the price oracle to use."
        }
      },
      "setPrices(uint256[])": {
        "details": "Sets rent prices.",
        "params": {
          "_rentPrices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11084,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "rentPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11087,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "usdOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorInterface)11073"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorInterface)11073": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}