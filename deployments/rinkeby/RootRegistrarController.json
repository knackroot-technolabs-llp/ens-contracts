{
  "address": "0x1C3F7745244E67619c27175cb21C58d195656771",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Root",
          "name": "_root",
          "type": "address"
        },
        {
          "internalType": "contract PriceOracle",
          "name": "_prices",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCommitmentAge",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_REGISTRATION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "makeCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "makeCommitmentWithConfig",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCommitmentAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCommitmentAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "registerWithConfig",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "rentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCommitmentAge",
          "type": "uint256"
        }
      ],
      "name": "setCommitmentAges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "_prices",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "valid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd596bcb2aeed6fbfb8e3631315d60dbd8884abb5957c5d700739c6e1cdd424d",
  "receipt": {
    "to": null,
    "from": "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    "contractAddress": "0x1C3F7745244E67619c27175cb21C58d195656771",
    "transactionIndex": 23,
    "gasUsed": "2330605",
    "logsBloom": "0x
    "blockHash": "0xac0e9664729ef19b0ed452c55624a52a72bf2963fd191b46d99334404b27325a",
    "transactionHash": "0xdd596bcb2aeed6fbfb8e3631315d60dbd8884abb5957c5d700739c6e1cdd424d",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 9206727,
        "transactionHash": "0xdd596bcb2aeed6fbfb8e3631315d60dbd8884abb5957c5d700739c6e1cdd424d",
        "address": "0x1C3F7745244E67619c27175cb21C58d195656771",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cebbdbbdfe8a1bb3f62a75b5fe9ebae5d105f8f"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xac0e9664729ef19b0ed452c55624a52a72bf2963fd191b46d99334404b27325a"
      }
    ],
    "blockNumber": 9206727,
    "cumulativeGasUsed": "11131516",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39A614eDF20f573D965A1d058545CB4074E556C4",
    "0x86E8f9363e799D8CCF21c92dc2cdaBAe399134F3",
    5,
    604800
  ],
  "solcInputHash": "a88ab937d7edb19a9d5df4bbdb2c860c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Root\",\"name\":\"_root\",\"type\":\"address\"},{\"internalType\":\"contract PriceOracle\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_REGISTRATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"makeCommitmentWithConfig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerWithConfig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"}],\"name\":\"setCommitmentAges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"_prices\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A registrar controller for registering and renewing names at fixed cost.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/RootRegistrarController.sol\":\"RootRegistrarController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/decentraname/IDecentraNameController.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\n\\r\\ninterface IDecentraNameController {\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function existsToken(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function burnToken(uint256 tokenId) external;\\r\\n\\r\\n    function mintToken(address owner, uint256 id) external;\\r\\n\\r\\n    function mintTokenForTLD(address owner, uint256 id) external;\\r\\n\\r\\n    function transferToken(address to, uint256 id) external;\\r\\n}\",\"keccak256\":\"0xa8ff6a1ab734c511ad20eecfebd5be3b533c937a0e9b140a3fe091454639ac81\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface PriceOracle {\\r\\n    /**\\r\\n     * @dev Returns the price to register or renew a name.\\r\\n     * @param name The name being registered or renewed.\\r\\n     * @param expires When the name presently expires (0 if this is a new registration).\\r\\n     * @param duration How long the name is being registered or extended for, in seconds.\\r\\n     * @return The price of this renewal or registration, in wei.\\r\\n     */\\r\\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x26d8ee2ae9ac3f030b849d97192ba5aef238d8708d2a4a236af19c79fdc5b92d\"},\"contracts/ethregistrar/RootRegistrarController.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"../root/Root.sol\\\";\\r\\nimport \\\"./StringUtils.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../resolvers/Resolver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\r\\n */\\r\\ncontract RootRegistrarController is Ownable {\\r\\n    using StringUtils for *;\\r\\n\\r\\n    uint constant public MIN_REGISTRATION_DURATION = 28 days;\\r\\n\\r\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n    bytes4 constant private COMMITMENT_CONTROLLER_ID = bytes4(\\r\\n        keccak256(\\\"rentPrice(string,uint256)\\\") ^\\r\\n        keccak256(\\\"available(string)\\\") ^\\r\\n        keccak256(\\\"makeCommitment(string,address,bytes32)\\\") ^\\r\\n        keccak256(\\\"commit(bytes32)\\\") ^\\r\\n        keccak256(\\\"register(string,address,uint256,bytes32)\\\") ^\\r\\n        keccak256(\\\"renew(string,uint256)\\\")\\r\\n    );\\r\\n\\r\\n    bytes4 constant private COMMITMENT_WITH_CONFIG_CONTROLLER_ID = bytes4(\\r\\n        keccak256(\\\"registerWithConfig(string,address,uint256,bytes32,address,address)\\\") ^\\r\\n        keccak256(\\\"makeCommitmentWithConfig(string,address,bytes32,address,address)\\\")\\r\\n    );\\r\\n\\r\\n    Root root;\\r\\n    PriceOracle prices;\\r\\n    uint public minCommitmentAge;\\r\\n    uint public maxCommitmentAge;\\r\\n\\r\\n    mapping(bytes32=>uint) public commitments;\\r\\n\\r\\n    event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint cost, uint expires);\\r\\n    event NameRenewed(string name, bytes32 indexed label, uint cost, uint expires);\\r\\n    event NewPriceOracle(address indexed oracle);\\r\\n\\r\\n    constructor(Root _root, PriceOracle _prices, uint _minCommitmentAge, uint _maxCommitmentAge) {\\r\\n        require(_maxCommitmentAge > _minCommitmentAge);\\r\\n\\r\\n        root = _root;\\r\\n        prices = _prices;\\r\\n        minCommitmentAge = _minCommitmentAge;\\r\\n        maxCommitmentAge = _maxCommitmentAge;\\r\\n    }\\r\\n\\r\\n    function rentPrice(string memory name, uint duration) view public returns(uint) {\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\r\\n        return prices.price(name, root.nameExpires(uint256(tokenId)), duration);\\r\\n    }\\r\\n\\r\\n    function valid(string memory name) public pure returns(bool) {\\r\\n        return name.strlen() >= 3;\\r\\n    }\\r\\n\\r\\n    function available(string memory name) public view returns(bool) {\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\r\\n        return valid(name) && root.available(uint256(tokenId));\\r\\n    }\\r\\n\\r\\n    function makeCommitment(string memory name, address owner, bytes32 secret) pure public returns(bytes32) {\\r\\n        return makeCommitmentWithConfig(name, owner, secret, address(0), address(0));\\r\\n    }\\r\\n\\r\\n    function makeCommitmentWithConfig(string memory name, address owner, bytes32 secret, address resolver, address addr) pure public returns(bytes32) {\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        if (resolver == address(0) && addr == address(0)) {\\r\\n            return keccak256(abi.encodePacked(label, owner, secret));\\r\\n        }\\r\\n        require(resolver != address(0));\\r\\n        return keccak256(abi.encodePacked(label, owner, resolver, addr, secret));\\r\\n    }\\r\\n\\r\\n    function commit(bytes32 commitment) public {\\r\\n        require(commitments[commitment] + maxCommitmentAge < block.timestamp);\\r\\n        commitments[commitment] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function register(string calldata name, address owner, uint duration, bytes32 secret) external payable {\\r\\n      registerWithConfig(name, owner, duration, secret, address(0), address(0));\\r\\n    }\\r\\n\\r\\n    function registerWithConfig(string memory name, address owner, uint duration, bytes32 secret, address resolver, address addr) public payable {\\r\\n        // TODO: name has to be TLD. put check for this\\r\\n        bytes32 commitment = makeCommitmentWithConfig(name, owner, secret, resolver, addr);\\r\\n        uint cost = _consumeCommitment(name, duration, commitment);\\r\\n\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        // The nodehash of this label\\r\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\r\\n\\r\\n        uint expires;\\r\\n        // TODO: Future release : skipping setting revords for now\\r\\n        // ---\\r\\n        // if(resolver != address(0)) {\\r\\n        //     // Set this contract as the (temporary) owner, giving it\\r\\n        //     // permission to set up the resolver.\\r\\n        //     expires = root.register(uint256(tokenId), address(this), duration);\\r\\n\\r\\n        //     // Set the resolver\\r\\n        //     root.ens().setResolver(tokenId, resolver);\\r\\n\\r\\n        //     // Configure the resolver\\r\\n        //     if (addr != address(0)) {\\r\\n        //         Resolver(resolver).setAddr(tokenId, addr);\\r\\n        //     }\\r\\n\\r\\n        //     // Now transfer full ownership to the expeceted owner\\r\\n        //     //base.reclaim(tokenId, owner);\\r\\n            \\r\\n        //     //base.transferFrom(address(this), owner, tokenId);\\r\\n        //     // TODO: can we improve below?\\r\\n        //     root.decentraNameController().decentraName().safeTransferFrom(address(this), owner, uint256(tokenId));\\r\\n        // } else \\r\\n        // ---\\r\\n        {\\r\\n            require(addr == address(0));\\r\\n            expires = root.register(uint256(tokenId), owner, duration);\\r\\n        }\\r\\n\\r\\n        emit NameRegistered(name, label, owner, cost, expires);\\r\\n\\r\\n        // Refund any extra payment\\r\\n        if(msg.value > cost) {\\r\\n            payable(msg.sender).transfer(msg.value - cost);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function renew(string calldata name, uint duration) external payable {\\r\\n        uint cost = rentPrice(name, duration);\\r\\n        require(msg.value >= cost);\\r\\n\\r\\n        bytes32 label = keccak256(bytes(name));\\r\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\r\\n        uint expires = root.renew(uint256(tokenId), duration);\\r\\n\\r\\n        if(msg.value > cost) {\\r\\n            payable(msg.sender).transfer(msg.value - cost);\\r\\n        }\\r\\n\\r\\n        emit NameRenewed(name, label, cost, expires);\\r\\n    }\\r\\n\\r\\n    function setPriceOracle(PriceOracle _prices) public onlyOwner {\\r\\n        prices = _prices;\\r\\n        emit NewPriceOracle(address(prices));\\r\\n    }\\r\\n\\r\\n    function setCommitmentAges(uint _minCommitmentAge, uint _maxCommitmentAge) public onlyOwner {\\r\\n        minCommitmentAge = _minCommitmentAge;\\r\\n        maxCommitmentAge = _maxCommitmentAge;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);        \\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\r\\n        return interfaceID == INTERFACE_META_ID ||\\r\\n               interfaceID == COMMITMENT_CONTROLLER_ID ||\\r\\n               interfaceID == COMMITMENT_WITH_CONFIG_CONTROLLER_ID;\\r\\n    }\\r\\n\\r\\n    function _consumeCommitment(string memory name, uint duration, bytes32 commitment) internal returns (uint256) {\\r\\n        // Require a valid commitment\\r\\n        require(commitments[commitment] + minCommitmentAge <= block.timestamp);\\r\\n\\r\\n        // If the commitment is too old, or the name is registered, stop\\r\\n        require(commitments[commitment] + maxCommitmentAge > block.timestamp);\\r\\n        require(available(name));\\r\\n\\r\\n        delete(commitments[commitment]);\\r\\n\\r\\n        uint cost = rentPrice(name, duration);\\r\\n        require(duration >= MIN_REGISTRATION_DURATION);\\r\\n        require(msg.value >= cost);\\r\\n\\r\\n        return cost;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc75577f6a6ea2af3aa9f18736f018c43409c8ea23b3003d904e8e8e609e4d977\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nlibrary StringUtils {\\r\\n    /**\\r\\n     * @dev Returns the length of a given string\\r\\n     *\\r\\n     * @param s The string to measure the length of\\r\\n     * @return The length of the input string\\r\\n     */\\r\\n    function strlen(string memory s) internal pure returns (uint) {\\r\\n        uint len;\\r\\n        uint i = 0;\\r\\n        uint bytelength = bytes(s).length;\\r\\n        for(len = 0; i < bytelength; len++) {\\r\\n            bytes1 b = bytes(s)[i];\\r\\n            if(b < 0x80) {\\r\\n                i += 1;\\r\\n            } else if (b < 0xE0) {\\r\\n                i += 2;\\r\\n            } else if (b < 0xF0) {\\r\\n                i += 3;\\r\\n            } else if (b < 0xF8) {\\r\\n                i += 4;\\r\\n            } else if (b < 0xFC) {\\r\\n                i += 5;\\r\\n            } else {\\r\\n                i += 6;\\r\\n            }\\r\\n        }\\r\\n        return len;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c474dd4b3d08792ffeb596fce9b9fd7a5aaff2bd31e61fcd873b3d9ac14d740\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\r\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\r\\n    function createSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\r\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\r\\n    function setResolver(bytes32 node, address resolver) external virtual;\\r\\n    function setOwner(bytes32 node, address owner) external virtual;\\r\\n    function createSubnode(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\r\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\r\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\r\\n    function owner(bytes32 node) external virtual view returns (address);\\r\\n    function resolver(bytes32 node) external virtual view returns (address);\\r\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\r\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\r\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7d8535619a015dc2405643fd354776094994c1c73321f1ddf56bfc14d2b5bb1\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * A generic resolver interface which includes all the functions including the ones deprecated\\r\\n */\\r\\ninterface Resolver{\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\r\\n    event NameChanged(bytes32 indexed node, string name);\\r\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\r\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\r\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\r\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\r\\n    /* Deprecated events */\\r\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\r\\n\\r\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\r\\n    function addr(bytes32 node) external view returns (address);\\r\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\r\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\r\\n    function dnsrr(bytes32 node) external view returns (bytes memory);\\r\\n    function name(bytes32 node) external view returns (string memory);\\r\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\r\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\r\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\r\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\r\\n    function setAddr(bytes32 node, address addr) external;\\r\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\r\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\r\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\r\\n    function setName(bytes32 node, string calldata _name) external;\\r\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\r\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\r\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\r\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\r\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\r\\n\\r\\n    /* Deprecated functions */\\r\\n    function content(bytes32 node) external view returns (bytes32);\\r\\n    function multihash(bytes32 node) external view returns (bytes memory);\\r\\n    function setContent(bytes32 node, bytes32 hash) external;\\r\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5ba7449de325057ec739ae94dece9be05affa9adba3d61fafd953034fd329e71\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Controllable is Ownable {\\r\\n    mapping(address => bool) public controllers;\\r\\n\\r\\n    event ControllerChanged(address indexed controller, bool enabled);\\r\\n\\r\\n    modifier onlyController {\\r\\n        require(\\r\\n            controllers[msg.sender],\\r\\n            \\\"Controllable: Caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setController(address controller, bool enabled) public onlyOwner {\\r\\n        controllers[controller] = enabled;\\r\\n        emit ControllerChanged(controller, enabled);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x93fd2f338e33aefa6e9e73b010630f0efe51f960754ab47d0dfb65e25c6804f9\"},\"contracts/root/Root.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Controllable.sol\\\";\\r\\nimport \\\"../decentraname/IDecentraNameController.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\n\\r\\n// TODO-review : I have extended from ERC721Holder to make this contract as valid NFT owner\\r\\ncontract Root is Ownable, Controllable, ERC721Holder {\\r\\n    bytes32 public constant rootNode = bytes32(0);\\r\\n    uint public constant GRACE_PERIOD = 90 days;\\r\\n\\r\\n    bytes4 private constant INTERFACE_META_ID =\\r\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n    // bytes4 constant private RECLAIM_ID = bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\r\\n\\r\\n    ENS public ens;\\r\\n\\r\\n    // The dweb NFT token\\r\\n    IDecentraNameController public decentraNameController;\\r\\n\\r\\n    // TODO: set expiry of root domain as infinity\\r\\n    // A map of expiry times\\r\\n    mapping(uint256=>uint) expiries;\\r\\n\\r\\n    // TODO: does locked makes sense now?\\r\\n    mapping(bytes32 => bool) public locked;\\r\\n\\r\\n    event TLDLocked(bytes32 indexed label);\\r\\n    event NameMigrated(uint256 indexed id, address indexed owner, uint expires);\\r\\n    event NameRegistered(uint256 indexed id, address indexed owner, uint expires);\\r\\n    event NameRenewed(uint256 indexed id, uint expires);\\r\\n\\r\\n    constructor(ENS _ens, IDecentraNameController _decentraNameController) {\\r\\n        ens = _ens;\\r\\n        decentraNameController =  _decentraNameController;\\r\\n    }\\r\\n\\r\\n    function setSubnodeOwner(bytes32 label, address owner)\\r\\n        external\\r\\n        onlyController\\r\\n    {\\r\\n        require(!locked[label]);\\r\\n        ens.setSubnodeOwner(rootNode, label, owner);\\r\\n    }\\r\\n\\r\\n    function setResolver(address resolver) external onlyOwner {\\r\\n        ens.setResolver(rootNode, resolver);\\r\\n    }\\r\\n\\r\\n    function lock(bytes32 label) external onlyOwner {\\r\\n        emit TLDLocked(label);\\r\\n        locked[label] = true;\\r\\n    }\\r\\n\\r\\n    function setRootDomainOwner() external onlyOwner {\\r\\n        decentraNameController.mintTokenForTLD(address(this), uint256(rootNode));\\r\\n    }\\r\\n\\r\\n    // TODO: add transfer method to transfer ownership of root node(NFT) in decentraname \\r\\n\\r\\n    // Returns the expiration timestamp of the specified id.\\r\\n    function nameExpires(uint256 id) external view returns(uint) {\\r\\n        return expiries[id];\\r\\n    }\\r\\n\\r\\n    // Returns true iff the specified name is available for registration.\\r\\n    function available(uint256 id) public view returns(bool) {\\r\\n        // Not available if it's registered here or in its grace period.\\r\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Register a name.\\r\\n     * @param id The token ID (keccak256 of the label).\\r\\n     * @param owner The address that should own the registration.\\r\\n     * @param duration Duration in seconds for the registration.\\r\\n     */\\r\\n\\r\\n    function register(uint256 id, address owner, uint duration) external onlyController returns(uint) {\\r\\n        require(available(id));\\r\\n        require(block.timestamp + duration + GRACE_PERIOD > block.timestamp + GRACE_PERIOD); // Prevent future overflow\\r\\n\\r\\n        expiries[id] = block.timestamp + duration;\\r\\n        if(decentraNameController.existsToken(id)) {\\r\\n            // Name was previously owned, and expired\\r\\n            decentraNameController.burnToken(id);\\r\\n        }\\r\\n        decentraNameController.mintTokenForTLD(owner, id);\\r\\n\\r\\n        emit NameRegistered(id, owner, block.timestamp + duration);\\r\\n\\r\\n        return block.timestamp + duration;\\r\\n    }\\r\\n\\r\\n    function renew(uint256 id, uint duration) external onlyController returns(uint) {\\r\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\r\\n        require(expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD); // Prevent future overflow\\r\\n\\r\\n        expiries[id] += duration;\\r\\n        emit NameRenewed(id, expiries[id]);\\r\\n        return expiries[id];\\r\\n    }\\r\\n\\r\\n    // TODO: revisit this. we may not require reclaim as every url is now NFT\\r\\n    // TODO: review: removing below methods as it is no logner required. Now ownership is no longer managed in ens but in decentraName only\\r\\n    /**\\r\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\r\\n     */\\r\\n    // function reclaim(uint256 id, address owner) external override live {\\r\\n    //     require(decentraNameController.isApprovedOrOwner(msg.sender, id));\\r\\n    //     ens.setSubnodeOwner(baseNode, bytes32(id), owner);\\r\\n    // }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID)\\r\\n        external\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return interfaceID == INTERFACE_META_ID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7db0fe90fc34cf7689b5497ef1fe54a4203a9d88a151f56536eb51a797827198\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a3c38038062002a3c83398181016040528101906200003791906200020f565b620000576200004b620000fe60201b60201c565b6200010660201b60201c565b8181116200006457600080fd5b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160038190555080600481905550505050506200032f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001db81620002e1565b92915050565b600081519050620001f281620002fb565b92915050565b600081519050620002098162000315565b92915050565b600080600080608085870312156200022657600080fd5b60006200023687828801620001e1565b94505060206200024987828801620001ca565b93505060406200025c87828801620001f8565b92505060606200026f87828801620001f8565b91505092959194509250565b60006200028882620002b7565b9050919050565b60006200029c826200027b565b9050919050565b6000620002b0826200027b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002ec816200028f565b8114620002f857600080fd5b50565b6200030681620002a3565b81146200031257600080fd5b50565b6200032081620002d7565b81146200032c57600080fd5b50565b6126fd806200033f6000396000f3fe60806040526004361061011f5760003560e01c80638d839ffe116100a0578063ce1e09c011610064578063ce1e09c0146103cb578063f14fcbc8146103f6578063f2fde38b1461041f578063f49826be14610448578063f7a16963146104855761011f565b80638d839ffe146102df5780638da5cb5b1461030a5780639791c09714610335578063acf1a84114610372578063aeb8ce9b1461038e5761011f565b80637e324479116100e75780637e324479146101f5578063839df9451461021e57806383e7f6ff1461025b57806385f6d155146102985780638a95b09f146102b45761011f565b806301ffc9a7146101245780633ccfd60b146101615780633d86c52f14610178578063530e784f146101b5578063715018a6146101de575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190611b67565b6104a1565b6040516101589190612159565b60405180910390f35b34801561016d57600080fd5b506101766106a7565b005b34801561018457600080fd5b5061019f600480360381019061019a9190611d39565b61076c565b6040516101ac9190612174565b60405180910390f35b3480156101c157600080fd5b506101dc60048036038101906101d79190611b90565b61088f565b005b3480156101ea57600080fd5b506101f36109b4565b005b34801561020157600080fd5b5061021c60048036038101906102179190611ee6565b610a3c565b005b34801561022a57600080fd5b5061024560048036038101906102409190611b15565b610aca565b604051610252919061224d565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190611e69565b610ae2565b60405161028f919061224d565b60405180910390f35b6102b260048036038101906102ad9190611bb9565b610d21565b005b3480156102c057600080fd5b506102c9610d7b565b6040516102d6919061224d565b60405180910390f35b3480156102eb57600080fd5b506102f4610d82565b604051610301919061224d565b60405180910390f35b34801561031657600080fd5b5061031f610d88565b60405161032c919061213e565b60405180910390f35b34801561034157600080fd5b5061035c60048036038101906103579190611c91565b610db1565b6040516103699190612159565b60405180910390f35b61038c60048036038101906103879190611c39565b610dc7565b005b34801561039a57600080fd5b506103b560048036038101906103b09190611c91565b611066565b6040516103c29190612159565b60405180910390f35b3480156103d757600080fd5b506103e0611207565b6040516103ed919061224d565b60405180910390f35b34801561040257600080fd5b5061041d60048036038101906104189190611b15565b61120d565b005b34801561042b57600080fd5b5061044660048036038101906104419190611ac3565b611254565b005b34801561045457600080fd5b5061046f600480360381019061046a9190611cd2565b61134c565b60405161047c9190612174565b60405180910390f35b61049f600480360381019061049a9190611dc8565b611365565b005b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061657507facf1a8418b97267ffdb4c11281360744af0ddfe62846b256a04a02acee3a53c37f85f6d1554d9d3ed5c2776e29804063f395dfd65a8dc71f4d1cb6f073d7ee75a37ff14fcbc8f6996b31406143e2613e60bde3c1118cfe166c0aa27ba40ef1033df57ff49826be766d3cc8dc7e4aab3f18eb3d339eb3bce85a7b9144119bbe997b2cc37faeb8ce9b70d5d3f3fba501c34cd61a54703dbe3cfb25bd75d3574635f9ea76837f83e7f6ff8df5fd22801ca995afba5d2bc5cac5264a339adb4a410c5da6c4332418181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106a057507f3d86c52f15403f1a062ec90b8fe0792e3be0a9cb236cd8ee4ec4b45821bd2faa7ff7a169630bfe39d181bbd2e0b758ee9f1a6ddc0eca0932c13225406d06d41653187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6106af611608565b73ffffffffffffffffffffffffffffffffffffffff166106cd610d88565b73ffffffffffffffffffffffffffffffffffffffff1614610723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071a9061222d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610769573d6000803e3d6000fd5b50565b60008086805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156107e15750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610819578086866040516020016107fb939291906120bc565b60405160208183030381529060405280519060200120915050610886565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561085357600080fd5b808685858860405160200161086c95949392919061205d565b604051602081830303815290604052805190602001209150505b95945050505050565b610897611608565b73ffffffffffffffffffffffffffffffffffffffff166108b5610d88565b73ffffffffffffffffffffffffffffffffffffffff161461090b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109029061222d565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e912360405160405180910390a250565b6109bc611608565b73ffffffffffffffffffffffffffffffffffffffff166109da610d88565b73ffffffffffffffffffffffffffffffffffffffff1614610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a279061222d565b60405180910390fd5b610a3a6000611610565b565b610a44611608565b73ffffffffffffffffffffffffffffffffffffffff16610a62610d88565b73ffffffffffffffffffffffffffffffffffffffff1614610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf9061222d565b60405180910390fd5b81600381905550806004819055505050565b60056020528060005260406000206000915090505481565b600080838051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190611b3e565b82604051602001610ba39291906120f9565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350e9a71586600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6e4fa868560001c6040518263ffffffff1660e01b8152600401610c58919061224d565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca89190611ebd565b876040518463ffffffff1660e01b8152600401610cc7939291906121cf565b60206040518083038186803b158015610cdf57600080fd5b505afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190611ebd565b9250505092915050565b610d7485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050848484600080611365565b5050505050565b6224ea0081565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006003610dbe836116d4565b10159050919050565b6000610e1784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505083610ae2565b905080341015610e2657600080fd5b60008484604051610e38929190612125565b604051809103902090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610eac57600080fd5b505afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190611b3e565b82604051602001610ef69291906120f9565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c475abff8360001c876040518363ffffffff1660e01b8152600401610f7092919061229f565b602060405180830381600087803b158015610f8a57600080fd5b505af1158015610f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc29190611ebd565b90508334111561101f573373ffffffffffffffffffffffffffffffffffffffff166108fc8534610ff2919061239b565b9081150290604051600060405180830381858888f1935050505015801561101d573d6000803e3d6000fd5b505b827f3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae88888785604051611055949392919061218f565b60405180910390a250505050505050565b600080828051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156110dd57600080fd5b505afa1580156110f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111159190611b3e565b826040516020016111279291906120f9565b60405160208183030381529060405280519060200120905061114884610db1565b80156111fe5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e88260001c6040518263ffffffff1660e01b81526004016111ad919061224d565b60206040518083038186803b1580156111c557600080fd5b505afa1580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd9190611aec565b5b92505050919050565b60045481565b42600454600560008481526020019081526020016000205461122f9190612345565b1061123957600080fd5b42600560008381526020019081526020016000208190555050565b61125c611608565b73ffffffffffffffffffffffffffffffffffffffff1661127a610d88565b73ffffffffffffffffffffffffffffffffffffffff16146112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c79061222d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611340576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113379061220d565b60405180910390fd5b61134981611610565b50565b600061135c84848460008061076c565b90509392505050565b6000611374878786868661076c565b905060006113838887846118af565b90506000888051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fb57600080fd5b505afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114339190611b3e565b826040516020016114459291906120f9565b60405160208183030381529060405280519060200120905060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461149757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca247ac8360001c8c8c6040518463ffffffff1660e01b81526004016114f993929190612268565b602060405180830381600087803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154b9190611ebd565b90508973ffffffffffffffffffffffffffffffffffffffff16837fca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f8d8785604051611598939291906121cf565b60405180910390a3833411156115fb573373ffffffffffffffffffffffffffffffffffffffff166108fc85346115ce919061239b565b9081150290604051600060405180830381858888f193505050501580156115f9573d6000803e3d6000fd5b505b5050505050505050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060008084519050600092505b808210156118a4576000858381518110611726577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156117755760018361176e9190612345565b9250611890565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156117b7576002836117b09190612345565b925061188f565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156117f9576003836117f29190612345565b925061188e565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561183a576004836118339190612345565b925061188d565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561187c576005836118759190612345565b925061188c565b6006836118899190612345565b92505b5b5b5b5b50828061189c906124d2565b9350506116e3565b829350505050919050565b60004260035460056000858152602001908152602001600020546118d39190612345565b11156118de57600080fd5b4260045460056000858152602001908152602001600020546119009190612345565b1161190a57600080fd5b61191384611066565b61191c57600080fd5b6005600083815260200190815260200160002060009055600061193f8585610ae2565b90506224ea0084101561195157600080fd5b8034101561195e57600080fd5b809150509392505050565b600061197c611977846122ed565b6122c8565b90508281526020810184848401111561199457600080fd5b61199f84828561245f565b509392505050565b6000813590506119b68161263d565b92915050565b6000815190506119cb81612654565b92915050565b6000813590506119e08161266b565b92915050565b6000815190506119f58161266b565b92915050565b600081359050611a0a81612682565b92915050565b600081359050611a1f81612699565b92915050565b60008083601f840112611a3757600080fd5b8235905067ffffffffffffffff811115611a5057600080fd5b602083019150836001820283011115611a6857600080fd5b9250929050565b600082601f830112611a8057600080fd5b8135611a90848260208601611969565b91505092915050565b600081359050611aa8816126b0565b92915050565b600081519050611abd816126b0565b92915050565b600060208284031215611ad557600080fd5b6000611ae3848285016119a7565b91505092915050565b600060208284031215611afe57600080fd5b6000611b0c848285016119bc565b91505092915050565b600060208284031215611b2757600080fd5b6000611b35848285016119d1565b91505092915050565b600060208284031215611b5057600080fd5b6000611b5e848285016119e6565b91505092915050565b600060208284031215611b7957600080fd5b6000611b87848285016119fb565b91505092915050565b600060208284031215611ba257600080fd5b6000611bb084828501611a10565b91505092915050565b600080600080600060808688031215611bd157600080fd5b600086013567ffffffffffffffff811115611beb57600080fd5b611bf788828901611a25565b95509550506020611c0a888289016119a7565b9350506040611c1b88828901611a99565b9250506060611c2c888289016119d1565b9150509295509295909350565b600080600060408486031215611c4e57600080fd5b600084013567ffffffffffffffff811115611c6857600080fd5b611c7486828701611a25565b93509350506020611c8786828701611a99565b9150509250925092565b600060208284031215611ca357600080fd5b600082013567ffffffffffffffff811115611cbd57600080fd5b611cc984828501611a6f565b91505092915050565b600080600060608486031215611ce757600080fd5b600084013567ffffffffffffffff811115611d0157600080fd5b611d0d86828701611a6f565b9350506020611d1e868287016119a7565b9250506040611d2f868287016119d1565b9150509250925092565b600080600080600060a08688031215611d5157600080fd5b600086013567ffffffffffffffff811115611d6b57600080fd5b611d7788828901611a6f565b9550506020611d88888289016119a7565b9450506040611d99888289016119d1565b9350506060611daa888289016119a7565b9250506080611dbb888289016119a7565b9150509295509295909350565b60008060008060008060c08789031215611de157600080fd5b600087013567ffffffffffffffff811115611dfb57600080fd5b611e0789828a01611a6f565b9650506020611e1889828a016119a7565b9550506040611e2989828a01611a99565b9450506060611e3a89828a016119d1565b9350506080611e4b89828a016119a7565b92505060a0611e5c89828a016119a7565b9150509295509295509295565b60008060408385031215611e7c57600080fd5b600083013567ffffffffffffffff811115611e9657600080fd5b611ea285828601611a6f565b9250506020611eb385828601611a99565b9150509250929050565b600060208284031215611ecf57600080fd5b6000611edd84828501611aae565b91505092915050565b60008060408385031215611ef957600080fd5b6000611f0785828601611a99565b9250506020611f1885828601611a99565b9150509250929050565b611f2b816123cf565b82525050565b611f42611f3d826123cf565b61251b565b82525050565b611f51816123e1565b82525050565b611f60816123ed565b82525050565b611f77611f72826123ed565b61252d565b82525050565b6000611f898385612329565b9350611f9683858461245f565b82840190509392505050565b6000611fae8385612334565b9350611fbb83858461245f565b611fc4836125a7565b840190509392505050565b6000611fda8261231e565b611fe48185612334565b9350611ff481856020860161246e565b611ffd816125a7565b840191505092915050565b6000612015602683612334565b9150612020826125c5565b604082019050919050565b6000612038602083612334565b915061204382612614565b602082019050919050565b61205781612455565b82525050565b60006120698288611f66565b6020820191506120798287611f31565b6014820191506120898286611f31565b6014820191506120998285611f31565b6014820191506120a98284611f66565b6020820191508190509695505050505050565b60006120c88286611f66565b6020820191506120d88285611f31565b6014820191506120e88284611f66565b602082019150819050949350505050565b60006121058285611f66565b6020820191506121158284611f66565b6020820191508190509392505050565b6000612132828486611f7d565b91508190509392505050565b60006020820190506121536000830184611f22565b92915050565b600060208201905061216e6000830184611f48565b92915050565b60006020820190506121896000830184611f57565b92915050565b600060608201905081810360008301526121aa818688611fa2565b90506121b9602083018561204e565b6121c6604083018461204e565b95945050505050565b600060608201905081810360008301526121e98186611fcf565b90506121f8602083018561204e565b612205604083018461204e565b949350505050565b6000602082019050818103600083015261222681612008565b9050919050565b600060208201905081810360008301526122468161202b565b9050919050565b6000602082019050612262600083018461204e565b92915050565b600060608201905061227d600083018661204e565b61228a6020830185611f22565b612297604083018461204e565b949350505050565b60006040820190506122b4600083018561204e565b6122c1602083018461204e565b9392505050565b60006122d26122e3565b90506122de82826124a1565b919050565b6000604051905090565b600067ffffffffffffffff82111561230857612307612578565b5b612311826125a7565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061235082612455565b915061235b83612455565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123905761238f612549565b5b828201905092915050565b60006123a682612455565b91506123b183612455565b9250828210156123c4576123c3612549565b5b828203905092915050565b60006123da82612435565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061242e826123cf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561248c578082015181840152602081019050612471565b8381111561249b576000848401525b50505050565b6124aa826125a7565b810181811067ffffffffffffffff821117156124c9576124c8612578565b5b80604052505050565b60006124dd82612455565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156125105761250f612549565b5b600182019050919050565b600061252682612537565b9050919050565b6000819050919050565b6000612542826125b8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b612646816123cf565b811461265157600080fd5b50565b61265d816123e1565b811461266857600080fd5b50565b612674816123ed565b811461267f57600080fd5b50565b61268b816123f7565b811461269657600080fd5b50565b6126a281612423565b81146126ad57600080fd5b50565b6126b981612455565b81146126c457600080fd5b5056fea264697066735822122058a31568381b29fe89f628a9892b16b43a2af0a8031a4af61d21cf1454ed493364736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A registrar controller for registering and renewing names at fixed cost.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 529,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4196,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "root",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Root)6497"
      },
      {
        "astId": 4199,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "prices",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(PriceOracle)4130"
      },
      {
        "astId": 4201,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "minCommitmentAge",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4203,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "maxCommitmentAge",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4207,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "commitments",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PriceOracle)4130": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(Root)6497": {
        "encoding": "inplace",
        "label": "contract Root",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}