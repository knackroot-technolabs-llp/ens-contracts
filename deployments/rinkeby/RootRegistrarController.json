{
  "address": "0xfE3146317183cBdebDeE12c3584141Fb15a80668",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Root",
          "name": "_root",
          "type": "address"
        },
        {
          "internalType": "contract PriceOracle",
          "name": "_prices",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_dWebToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dwebDistributorAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_companyWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCommitmentAge",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "CompanyWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dwebDistributorAddress",
          "type": "address"
        }
      ],
      "name": "DecentraWebDistributorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_REGISTRATION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_REGISTRATION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "makeCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "makeCommitmentWithConfig",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCommitmentAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCommitmentAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isFeeInDWEBToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isFeeInDWEBToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "registerWithConfig",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFeeInDWEBToken",
          "type": "bool"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFeeInDWEBToken",
          "type": "bool"
        }
      ],
      "name": "rentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approver",
          "type": "address"
        }
      ],
      "name": "setApproverAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCommitmentAge",
          "type": "uint256"
        }
      ],
      "name": "setCommitmentAges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setCompanyWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dwebDistributorAddress",
          "type": "address"
        }
      ],
      "name": "setDecentraWebDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "_prices",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "valid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x288f2ea1e3b0270305660524bd0b2dd10ac2e7d8e021a17ee68c5777651e3333",
  "receipt": {
    "to": null,
    "from": "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    "contractAddress": "0xfE3146317183cBdebDeE12c3584141Fb15a80668",
    "transactionIndex": 26,
    "gasUsed": "3396434",
    "logsBloom": "0x
    "blockHash": "0xd0440b39633093a3e5c6ba2dc8adb267c91f1c1ea21764fb21b7d4dfd4778d47",
    "transactionHash": "0x288f2ea1e3b0270305660524bd0b2dd10ac2e7d8e021a17ee68c5777651e3333",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 9279260,
        "transactionHash": "0x288f2ea1e3b0270305660524bd0b2dd10ac2e7d8e021a17ee68c5777651e3333",
        "address": "0xfE3146317183cBdebDeE12c3584141Fb15a80668",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cebbdbbdfe8a1bb3f62a75b5fe9ebae5d105f8f"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0xd0440b39633093a3e5c6ba2dc8adb267c91f1c1ea21764fb21b7d4dfd4778d47"
      }
    ],
    "blockNumber": 9279260,
    "cumulativeGasUsed": "5764101",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43a5C8a707b5de8f36519Da642024D677A3FCadD",
    "0xb88842DEA5102B71a13Cc347a1B633BB0C2F987D",
    "0x539d437A329ef492BC3046eCf3cf729945000351",
    "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    60,
    604800
  ],
  "solcInputHash": "8c68d5010e2fa4b6ac6aaa07adf307ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Root\",\"name\":\"_root\",\"type\":\"address\"},{\"internalType\":\"contract PriceOracle\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dWebToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dwebDistributorAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_companyWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"CompanyWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dwebDistributorAddress\",\"type\":\"address\"}],\"name\":\"DecentraWebDistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_REGISTRATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REGISTRATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"makeCommitmentWithConfig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isFeeInDWEBToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFeeInDWEBToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"registerWithConfig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeInDWEBToken\",\"type\":\"bool\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeInDWEBToken\",\"type\":\"bool\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"setApproverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"}],\"name\":\"setCommitmentAges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setCompanyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dwebDistributorAddress\",\"type\":\"address\"}],\"name\":\"setDecentraWebDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"_prices\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A registrar controller for registering and renewing names at fixed cost.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/RootRegistrarController.sol\":\"RootRegistrarController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/decentraname/IDecentraNameController.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n\\ninterface IDecentraNameController {\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n    function existsToken(uint256 tokenId) external view returns (bool);\\n\\n    function burnToken(uint256 tokenId) external;\\n\\n    function mintToken(address owner, uint256 id) external;\\n\\n    function transferToken(address to, uint256 id, uint8 v, bytes32 r, bytes32 s, address sender) external;\\n}\",\"keccak256\":\"0xd13a96fd50ca659fecda44de57ed353f718d929e1197a0dc33844811ccb2f026\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface PriceOracle {\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return The price of this renewal or registration, in wei.\\n     */\\n    function price(string calldata name, uint expires, uint duration, bool isFeeInDWEBToken, address dWebTokenAddress) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xb338fb6fcb712b1f9a74c4ebd4299d3b103184d8d496ee0d61d7363e346689eb\"},\"contracts/ethregistrar/RootRegistrarController.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"../root/Root.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../resolvers/Resolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\n */\\ncontract RootRegistrarController is Ownable {\\n    using StringUtils for *;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint constant public MIN_REGISTRATION_DURATION = 31556926; // 1 year\\n    uint constant public MAX_REGISTRATION_DURATION = 157784630; // 5 years\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private COMMITMENT_CONTROLLER_ID = bytes4(\\n        keccak256(\\\"rentPrice(string,uint256)\\\") ^\\n        keccak256(\\\"available(string)\\\") ^\\n        keccak256(\\\"makeCommitment(string,address,bytes32)\\\") ^\\n        keccak256(\\\"commit(bytes32)\\\") ^\\n        keccak256(\\\"register(string,address,uint256,bytes32)\\\") ^\\n        keccak256(\\\"renew(string,uint256)\\\")\\n    );\\n\\n    bytes4 constant private COMMITMENT_WITH_CONFIG_CONTROLLER_ID = bytes4(\\n        keccak256(\\\"registerWithConfig(string,address,uint256,bytes32,address,address)\\\") ^\\n        keccak256(\\\"makeCommitmentWithConfig(string,address,bytes32,address,address)\\\")\\n    );\\n\\n    Root root;\\n    PriceOracle prices;\\n    uint public minCommitmentAge;\\n    uint public maxCommitmentAge;\\n\\n    mapping(bytes32=>uint) public commitments;\\n\\n    address approverAddress;\\n\\n    IERC20 private dWebToken;\\n\\n    uint256 private allowedFeeSlippagePercentage;\\n\\n    //Wallet where DWEB fees will go\\n    address private dwebDistributorAddress;\\n    //Wallet where ETH fees will go\\n    address payable private companyWallet;\\n\\n    event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint cost, uint expires);\\n    event NameRenewed(string name, bytes32 indexed label, uint cost, uint expires);\\n    event NewPriceOracle(address indexed oracle);\\n\\n    event DecentraWebDistributorChanged(address indexed dwebDistributorAddress);\\n    event CompanyWalletChanged(address indexed wallet);\\n\\n    modifier onlyContract(address account)\\n    {\\n        require(account.isContract(), \\\"[Validation] The address does not contain a contract\\\");\\n        _;\\n    }\\n\\n    constructor(Root _root, PriceOracle _prices, IERC20 _dWebToken, address _dwebDistributorAddress, address payable _companyWallet, uint _minCommitmentAge, uint _maxCommitmentAge) {\\n        require(_maxCommitmentAge > _minCommitmentAge);\\n\\n        root = _root;\\n        prices = _prices;\\n        dWebToken = _dWebToken;\\n        dwebDistributorAddress = _dwebDistributorAddress;\\n        companyWallet = _companyWallet;\\n        minCommitmentAge = _minCommitmentAge;\\n        maxCommitmentAge = _maxCommitmentAge;\\n        allowedFeeSlippagePercentage = 5;\\n    }\\n\\n    // Actual price is returned. Any additional cost/price slippage should be taken care by front end when sending tx\\n    // returned price is in wei or ERC20 token decimal \\n    // duration in seconds\\n    function rentPrice(string memory name, uint duration, bool isFeeInDWEBToken) view public returns(uint256) {\\n        bytes32 label = keccak256(bytes(name));\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\n        return prices.price(name, root.nameExpires(uint256(tokenId)), duration, isFeeInDWEBToken, address(dWebToken));\\n    }\\n\\n    function valid(string memory name) public pure returns(bool) {\\n        return name.strlen() >= 3;\\n    }\\n\\n    function available(string memory name) public view returns(bool) {\\n        bytes32 label = keccak256(bytes(name));\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\n        return valid(name) && root.available(uint256(tokenId));\\n    }\\n\\n    function makeCommitment(string memory name, address owner, bytes32 secret) pure public returns(bytes32) {\\n        return makeCommitmentWithConfig(name, owner, secret, address(0), address(0));\\n    }\\n\\n    function makeCommitmentWithConfig(string memory name, address owner, bytes32 secret, address resolver, address addr) pure public returns(bytes32) {\\n        bytes32 label = keccak256(bytes(name));\\n        if (resolver == address(0) && addr == address(0)) {\\n            return keccak256(abi.encodePacked(label, owner, secret));\\n        }\\n        require(resolver != address(0));\\n        return keccak256(abi.encodePacked(label, owner, resolver, addr, secret));\\n    }\\n\\n    function commit(bytes32 commitment, uint8 v, bytes32 r, bytes32 s) public {\\n        require(commitments[commitment] + maxCommitmentAge < block.timestamp);\\n        // name must be approved by approver address\\n        \\n        //TODO-release: uncomment below block\\n        /*\\n        address signer = ecrecover(commitment, v, r, s);\\n        require(signer == approverAddress, \\\"commit: invalid signature\\\");\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n        */\\n        \\n        commitments[commitment] = block.timestamp;\\n    }\\n\\n    function register(string calldata name, address owner, uint duration, bytes32 secret, bool isFeeInDWEBToken, uint256 fee) external payable {\\n      registerWithConfig(name, owner, duration, secret, address(0), address(0), isFeeInDWEBToken, fee);\\n    }\\n\\n    // fee must be passed in decimal\\n    // name must be TLD. It should not contain dot(.)\\n    function registerWithConfig(string memory name, address owner, uint duration, bytes32 secret, address resolver, address addr, bool isFeeInDWEBToken, uint256 fee) public payable {\\n        \\n        // TODO: name has to be TLD. put check for this\\n        bytes32 commitment = makeCommitmentWithConfig(name, owner, secret, resolver, addr);\\n        \\n        _consumeCommitment(name, duration, commitment);\\n\\n        uint256 cost = rentPrice(name, duration, isFeeInDWEBToken);\\n\\n        bytes32 label = keccak256(bytes(name));\\n        // The nodehash of this label\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\n\\n        uint expires;\\n        // TODO-enhancement : skipping setting records for now\\n        // ---\\n        // if(resolver != address(0)) {\\n        //     // Set this contract as the (temporary) owner, giving it\\n        //     // permission to set up the resolver.\\n        //     expires = root.register(uint256(tokenId), address(this), duration);\\n\\n        //     // Set the resolver\\n        //     root.ens().setResolver(tokenId, resolver);\\n\\n        //     // Configure the resolver\\n        //     if (addr != address(0)) {\\n        //         Resolver(resolver).setAddr(tokenId, addr);\\n        //     }\\n\\n        //     // Now transfer full ownership to the expeceted owner\\n        //     //base.reclaim(tokenId, owner);\\n            \\n        //     //base.transferFrom(address(this), owner, tokenId);\\n        //     // TODO: can we improve below?\\n        //     root.decentraNameController().decentraName().safeTransferFrom(address(this), owner, uint256(tokenId));\\n        // } else \\n        // ---\\n        {\\n            require(addr == address(0));\\n            expires = root.register(uint256(tokenId), owner, duration);\\n        }\\n\\n        \\n\\n        // Process payment\\n\\n        if(isFeeInDWEBToken) {\\n            // TODO-review: do we really need to fail the tx\\n            // uint256 feeDiff = 0;\\n            // if( fee < cost ) {\\n            //     feeDiff = cost.sub(fee);\\n            //     uint256 feeSlippagePercentage = feeDiff.mul(100).div(cost);\\n            //     //will allow if diff is less than 5%\\n            //     require(feeSlippagePercentage < allowedFeeSlippagePercentage, \\\"[Validation] Fee (DWEB) is below minimum required fee\\\");\\n            // }\\n            require(fee >= cost, \\\"[Validation] Enough DWEB not sent\\\");\\n            dWebToken.safeTransferFrom(msg.sender, dwebDistributorAddress, cost);\\n        } else {\\n            require(msg.value >= cost, \\\"[Validation] Enough ETH not sent\\\");\\n            // TODO-review : we still need to refund right?\\n            (bool success,) = companyWallet.call{value: cost}(\\\"\\\");\\n            require(success, \\\"[Validation] Transfer of fee failed\\\");\\n\\n            // Refund any extra payment\\n            if(msg.value > cost) {\\n                payable(msg.sender).transfer(msg.value - cost);\\n            }\\n        }\\n\\n        emit NameRegistered(name, label, owner, cost, expires);\\n\\n    }\\n\\n    function renew(string calldata name, uint duration, bool isFeeInDWEBToken) external payable {\\n        // TODO: manage total duration should be between 1 year and 5 years\\n        // TODO: payment processing in dweb pending\\n        uint256 cost = rentPrice(name, duration, isFeeInDWEBToken);\\n        require(msg.value >= cost);\\n\\n        bytes32 label = keccak256(bytes(name));\\n        bytes32 tokenId = keccak256(abi.encodePacked(root.rootNode(), label));\\n        uint expires = root.renew(uint256(tokenId), duration);\\n\\n        if(msg.value > cost) {\\n            payable(msg.sender).transfer(msg.value - cost);\\n        }\\n\\n        emit NameRenewed(name, label, cost, expires);\\n    }\\n\\n    function setPriceOracle(PriceOracle _prices) public onlyOwner {\\n        prices = _prices;\\n        emit NewPriceOracle(address(prices));\\n    }\\n\\n    function setCommitmentAges(uint _minCommitmentAge, uint _maxCommitmentAge) public onlyOwner {\\n        minCommitmentAge = _minCommitmentAge;\\n        maxCommitmentAge = _maxCommitmentAge;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);        \\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return interfaceID == INTERFACE_META_ID ||\\n               interfaceID == COMMITMENT_CONTROLLER_ID ||\\n               interfaceID == COMMITMENT_WITH_CONFIG_CONTROLLER_ID;\\n    }\\n\\n    function _consumeCommitment(string memory name, uint duration, bytes32 commitment) internal returns (uint256) {\\n        // Require a valid commitment\\n        require(commitments[commitment] + minCommitmentAge <= block.timestamp);\\n\\n        // If the commitment is too old, or the name is registered, stop\\n        require(commitments[commitment] + maxCommitmentAge > block.timestamp);\\n        require(available(name));\\n\\n        delete(commitments[commitment]);\\n\\n        require(duration >= MIN_REGISTRATION_DURATION);\\n        require(duration <= MAX_REGISTRATION_DURATION);\\n    }\\n\\n    function setApproverAddress(address _approver) external onlyOwner {\\n        approverAddress = _approver;\\n    }\\n\\n    function setDecentraWebDistributor(address _dwebDistributorAddress) external onlyOwner onlyContract(dwebDistributorAddress) {\\n        require(\\n            _dwebDistributorAddress != address(0),\\n            \\\"[Validation] dwebDistributorAddress is the zero address\\\"\\n        );\\n        dwebDistributorAddress = _dwebDistributorAddress;\\n\\n        emit DecentraWebDistributorChanged(_dwebDistributorAddress);\\n    }\\n\\n    function setCompanyWallet(address payable wallet) external onlyOwner {\\n        require(\\n            wallet != address(0),\\n            \\\"[Validation] wallet is the zero address\\\"\\n        );\\n        companyWallet = wallet;\\n\\n        emit CompanyWalletChanged(wallet);\\n    }\\n}\\n\",\"keccak256\":\"0x0c299d175b0e4b24e367331a9ee35c4de5209566d5150a98024d6eb4fef96cd2\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl, uint8 v, bytes32 r, bytes32 s) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl, uint8 v, bytes32 r, bytes32 s) external virtual;\\n    function createSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner, uint8 v, bytes32 r, bytes32 s) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner, uint8 v, bytes32 r, bytes32 s) external virtual;\\n    function createSubnode(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x01e3537bc98814687cbab41a2049726f3b006478a341197d01e1743c897996d7\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver{\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n    function addr(bytes32 node) external view returns (address);\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n    function dnsrr(bytes32 node) external view returns (bytes memory);\\n    function name(bytes32 node) external view returns (string memory);\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n    function setAddr(bytes32 node, address addr) external;\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n    function setName(bytes32 node, string calldata _name) external;\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n    function setContent(bytes32 node, bytes32 hash) external;\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x696c3b1e718aad7054ec75bc74b627c2bfea71b32fb1054ee021d0e079388275\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"},\"contracts/root/Root.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Controllable.sol\\\";\\nimport \\\"../decentraname/IDecentraNameController.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\ncontract Root is Ownable, Controllable, ERC721Holder {\\n    bytes32 public constant rootNode = bytes32(0);\\n    uint public constant GRACE_PERIOD = 90 days;\\n\\n    bytes4 private constant INTERFACE_META_ID =\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    // bytes4 constant private RECLAIM_ID = bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\n\\n    ENS public ens;\\n\\n    // The dweb NFT token\\n    IDecentraNameController public decentraNameController;\\n\\n    // TODO: set expiry of root domain as infinity\\n    // A map of expiry times\\n    mapping(uint256=>uint) expiries;\\n\\n    // TODO: does locked makes sense now?\\n    mapping(bytes32 => bool) public locked;\\n\\n    event TLDLocked(bytes32 indexed label);\\n    event NameMigrated(uint256 indexed id, address indexed owner, uint expires);\\n    event NameRegistered(uint256 indexed id, address indexed owner, uint expires);\\n    event NameRenewed(uint256 indexed id, uint expires);\\n\\n    constructor(ENS _ens, IDecentraNameController _decentraNameController) {\\n        ens = _ens;\\n        decentraNameController =  _decentraNameController;\\n    }\\n\\n    // there is already method in ensregistry to do this\\n    // function setSubnodeOwner(bytes32 label, address owner)\\n    //     external\\n    //     onlyController\\n    // {\\n    //     require(!locked[label]);\\n    //     ens.setSubnodeOwner(rootNode, label, owner);\\n    // }\\n\\n    function setResolver(address resolver) external onlyOwner {\\n        ens.setResolver(rootNode, resolver);\\n    }\\n\\n    function lock(bytes32 label) external onlyOwner {\\n        emit TLDLocked(label);\\n        locked[label] = true;\\n    }\\n\\n    function setRootDomainOwner() external onlyOwner {\\n        decentraNameController.mintToken(address(this), uint256(rootNode));\\n    }\\n\\n    // TODO: add transfer method to transfer ownership of root node(NFT) in decentraname \\n\\n    // Returns the expiration timestamp of the specified id.\\n    function nameExpires(uint256 id) external view returns(uint) {\\n        return expiries[id];\\n    }\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) public view returns(bool) {\\n        // Not available if it's registered here or in its grace period.\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n\\n    function register(uint256 id, address owner, uint duration) external onlyController returns(uint) {\\n        require(available(id));\\n        require(block.timestamp + duration + GRACE_PERIOD > block.timestamp + GRACE_PERIOD); // Prevent future overflow\\n\\n        expiries[id] = block.timestamp + duration;\\n        if(decentraNameController.existsToken(id)) {\\n            // Name was previously owned, and expired\\n            decentraNameController.burnToken(id);\\n        }\\n        decentraNameController.mintToken(owner, id);\\n\\n        emit NameRegistered(id, owner, block.timestamp + duration);\\n\\n        return block.timestamp + duration;\\n    }\\n\\n    function renew(uint256 id, uint duration) external onlyController returns(uint) {\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\n        require(expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD); // Prevent future overflow\\n\\n        expiries[id] += duration;\\n        emit NameRenewed(id, expiries[id]);\\n        return expiries[id];\\n    }\\n\\n    // TODO: revisit this. we may not require reclaim as every url is now NFT\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    // function reclaim(uint256 id, address owner) external override live {\\n    //     require(decentraNameController.isApprovedOrOwner(msg.sender, id));\\n    //     ens.setSubnodeOwner(baseNode, bytes32(id), owner);\\n    // }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n        external\\n        pure\\n        returns (bool)\\n    {\\n        return interfaceID == INTERFACE_META_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xedf5aa0099c346676e4714ac453af8ddcf2e43bae754d63223bf7a7bd5098f91\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003da838038062003da8833981810160405281019062000037919062000322565b620000576200004b620001cc60201b60201c565b620001d460201b60201c565b8181116200006457600080fd5b86600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160038190555080600481905550600560088190555050505050505050620004f9565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620002a9816200045d565b92915050565b600081519050620002c08162000477565b92915050565b600081519050620002d78162000491565b92915050565b600081519050620002ee81620004ab565b92915050565b6000815190506200030581620004c5565b92915050565b6000815190506200031c81620004df565b92915050565b600080600080600080600060e0888a0312156200033e57600080fd5b60006200034e8a828b01620002f4565b9750506020620003618a828b01620002dd565b9650506040620003748a828b01620002c6565b9550506060620003878a828b0162000298565b94505060806200039a8a828b01620002af565b93505060a0620003ad8a828b016200030b565b92505060c0620003c08a828b016200030b565b91505092959891949750929550565b6000620003dc8262000433565b9050919050565b6000620003f08262000433565b9050919050565b60006200040482620003cf565b9050919050565b60006200041882620003cf565b9050919050565b60006200042c82620003cf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200046881620003cf565b81146200047457600080fd5b50565b6200048281620003e3565b81146200048e57600080fd5b50565b6200049c81620003f7565b8114620004a857600080fd5b50565b620004b6816200040b565b8114620004c257600080fd5b50565b620004d0816200041f565b8114620004dc57600080fd5b50565b620004ea8162000453565b8114620004f657600080fd5b50565b61389f80620005096000396000f3fe60806040526004361061014b5760003560e01c8063839df945116100b6578063aeb8ce9b1161006f578063aeb8ce9b14610453578063c7f9968214610490578063ce1e09c0146104b9578063cf8fc3b1146104e4578063f2fde38b1461050d578063f49826be146105365761014b565b8063839df9451461033c5780638a95b09f146103795780638d839ffe146103a45780638da5cb5b146103cf57806391fb1aaa146103fa5780639791c097146104165761014b565b80634be2b2ec116101085780634be2b2ec1461024f578063530e784f1461026b57806359192b89146102945780636cfc51e2146102bf578063715018a6146102fc5780637e324479146103135761014b565b806301ffc9a7146101505780630cff2adf1461018d57806328831187146101b65780633ccfd60b146101df5780633d86c52f146101f6578063400713ba14610233575b600080fd5b34801561015c57600080fd5b506101776004803603810190610172919061262e565b610573565b6040516101849190612e89565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af91906125cb565b610779565b005b3480156101c257600080fd5b506101dd60048036038101906101d89190612527565b6107c3565b005b3480156101eb57600080fd5b506101f4610936565b005b34801561020257600080fd5b5061021d6004803603810190610218919061283b565b6109fb565b60405161022a9190612ea4565b60405180910390f35b61024d60048036038101906102489190612680565b610b1e565b005b61026960048036038101906102649190612727565b610b7c565b005b34801561027757600080fd5b50610292600480360381019061028d9190612657565b610e1d565b005b3480156102a057600080fd5b506102a9610f42565b6040516102b69190613119565b60405180910390f35b3480156102cb57600080fd5b506102e660048036038101906102e19190612994565b610f4a565b6040516102f39190613119565b60405180910390f35b34801561030857600080fd5b506103116111b0565b005b34801561031f57600080fd5b5061033a60048036038101906103359190612a24565b611238565b005b34801561034857600080fd5b50610363600480360381019061035e9190612579565b6112c6565b6040516103709190613119565b60405180910390f35b34801561038557600080fd5b5061038e6112de565b60405161039b9190613119565b60405180910390f35b3480156103b057600080fd5b506103b96112e6565b6040516103c69190613119565b60405180910390f35b3480156103db57600080fd5b506103e46112ec565b6040516103f19190612e37565b60405180910390f35b610414600480360381019061040f91906128ca565b611315565b005b34801561042257600080fd5b5061043d60048036038101906104389190612793565b611798565b60405161044a9190612e89565b60405180910390f35b34801561045f57600080fd5b5061047a60048036038101906104759190612793565b6117ae565b6040516104879190612e89565b60405180910390f35b34801561049c57600080fd5b506104b760048036038101906104b291906124fe565b61194f565b005b3480156104c557600080fd5b506104ce611b44565b6040516104db9190613119565b60405180910390f35b3480156104f057600080fd5b5061050b600480360381019061050691906124fe565b611b4a565b005b34801561051957600080fd5b50610534600480360381019061052f91906124fe565b611c0a565b005b34801561054257600080fd5b5061055d600480360381019061055891906127d4565b611d02565b60405161056a9190612ea4565b60405180910390f35b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106e857507facf1a8418b97267ffdb4c11281360744af0ddfe62846b256a04a02acee3a53c37f85f6d1554d9d3ed5c2776e29804063f395dfd65a8dc71f4d1cb6f073d7ee75a37ff14fcbc8f6996b31406143e2613e60bde3c1118cfe166c0aa27ba40ef1033df57ff49826be766d3cc8dc7e4aab3f18eb3d339eb3bce85a7b9144119bbe997b2cc37faeb8ce9b70d5d3f3fba501c34cd61a54703dbe3cfb25bd75d3574635f9ea76837f83e7f6ff8df5fd22801ca995afba5d2bc5cac5264a339adb4a410c5da6c4332418181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061077257507f3d86c52f15403f1a062ec90b8fe0792e3be0a9cb236cd8ee4ec4b45821bd2faa7ff7a169630bfe39d181bbd2e0b758ee9f1a6ddc0eca0932c13225406d06d41653187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b42600454600560008781526020019081526020016000205461079b919061321c565b106107a557600080fd5b42600560008681526020019081526020016000208190555050505050565b6107cb611d1b565b73ffffffffffffffffffffffffffffffffffffffff166107e96112ec565b73ffffffffffffffffffffffffffffffffffffffff161461083f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083690613099565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a690612ff9565b60405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f7e76721cea8dbabf87d986684549c169dcbd01bfefb5082b3ecc54bbe323e77e60405160405180910390a250565b61093e611d1b565b73ffffffffffffffffffffffffffffffffffffffff1661095c6112ec565b73ffffffffffffffffffffffffffffffffffffffff16146109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a990613099565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156109f8573d6000803e3d6000fd5b50565b60008086805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015610a705750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610aa857808686604051602001610a8a93929190612d89565b60405160208183030381529060405280519060200120915050610b15565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610ae257600080fd5b8086858588604051602001610afb959493929190612d2a565b604051602081830303815290604052805190602001209150505b95945050505050565b610b7387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686866000808888611315565b50505050505050565b6000610bcd85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508484610f4a565b905080341015610bdc57600080fd5b60008585604051610bee929190612df2565b604051809103902090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6257600080fd5b505afa158015610c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9a91906125a2565b82604051602001610cac929190612dc6565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c475abff8360001c886040518363ffffffff1660e01b8152600401610d2692919061316b565b602060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7891906129fb565b905083341115610dd5573373ffffffffffffffffffffffffffffffffffffffff166108fc8534610da89190613272565b9081150290604051600060405180830381858888f19350505050158015610dd3573d6000803e3d6000fd5b505b827f3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae89898785604051610e0b9493929190612ebf565b60405180910390a25050505050505050565b610e25611d1b565b73ffffffffffffffffffffffffffffffffffffffff16610e436112ec565b73ffffffffffffffffffffffffffffffffffffffff1614610e99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9090613099565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e912360405160405180910390a250565b6309679a3681565b600080848051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff991906125a2565b8260405160200161100b929190612dc6565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5d93ba987600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6e4fa868560001c6040518263ffffffff1660e01b81526004016110c09190613119565b60206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111091906129fb565b8888600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518663ffffffff1660e01b8152600401611155959493929190612f5f565b60206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a591906129fb565b925050509392505050565b6111b8611d1b565b73ffffffffffffffffffffffffffffffffffffffff166111d66112ec565b73ffffffffffffffffffffffffffffffffffffffff161461122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390613099565b60405180910390fd5b6112366000611d23565b565b611240611d1b565b73ffffffffffffffffffffffffffffffffffffffff1661125e6112ec565b73ffffffffffffffffffffffffffffffffffffffff16146112b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ab90613099565b60405180910390fd5b81600381905550806004819055505050565b60056020528060005260406000206000915090505481565b6301e1853e81565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061132489898888886109fb565b9050611331898883611de7565b50600061133f8a8986610f4a565b905060008a8051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef91906125a2565b82604051602001611401929190612dc6565b60405160208183030381529060405280519060200120905060008073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461145357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca247ac8360001c8e8e6040518463ffffffff1660e01b81526004016114b593929190613134565b602060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150791906129fb565b905086156115c85783861015611552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611549906130f9565b60405180910390fd5b6115c333600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611e94909392919063ffffffff16565b611736565b8334101561160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160290612fb9565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161165390612e22565b60006040518083038185875af1925050503d8060008114611690576040519150601f19603f3d011682016040523d82523d6000602084013e611695565b606091505b50509050806116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090613019565b60405180910390fd5b84341115611734573373ffffffffffffffffffffffffffffffffffffffff166108fc86346117079190613272565b9081150290604051600060405180830381858888f19350505050158015611732573d6000803e3d6000fd5b505b505b8b73ffffffffffffffffffffffffffffffffffffffff16837fca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f8f878560405161178193929190612f21565b60405180910390a350505050505050505050505050565b600060036117a583611f1d565b10159050919050565b600080828051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561182557600080fd5b505afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d91906125a2565b8260405160200161186f929190612dc6565b60405160208183030381529060405280519060200120905061189084611798565b80156119465750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e88260001c6040518263ffffffff1660e01b81526004016118f59190613119565b60206040518083038186803b15801561190d57600080fd5b505afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119459190612550565b5b92505050919050565b611957611d1b565b73ffffffffffffffffffffffffffffffffffffffff166119756112ec565b73ffffffffffffffffffffffffffffffffffffffff16146119cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c290613099565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a0d8173ffffffffffffffffffffffffffffffffffffffff166120f8565b611a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4390613079565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab390613059565b60405180910390fd5b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fe84b1c3567d939c721221cf11dbfa72d4fce11c22142b08ba83babfd72b29abc60405160405180910390a25050565b60045481565b611b52611d1b565b73ffffffffffffffffffffffffffffffffffffffff16611b706112ec565b73ffffffffffffffffffffffffffffffffffffffff1614611bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbd90613099565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611c12611d1b565b73ffffffffffffffffffffffffffffffffffffffff16611c306112ec565b73ffffffffffffffffffffffffffffffffffffffff1614611c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7d90613099565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ced90612fd9565b60405180910390fd5b611cff81611d23565b50565b6000611d128484846000806109fb565b90509392505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000426003546005600085815260200190815260200160002054611e0b919061321c565b1115611e1657600080fd5b426004546005600085815260200190815260200160002054611e38919061321c565b11611e4257600080fd5b611e4b846117ae565b611e5457600080fd5b60056000838152602001908152602001600020600090556301e1853e831015611e7c57600080fd5b6309679a36831115611e8d57600080fd5b9392505050565b611f17846323b872dd60e01b858585604051602401611eb593929190612e52565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061210b565b50505050565b60008060008084519050600092505b808210156120ed576000858381518110611f6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015611fbe57600183611fb7919061321c565b92506120d9565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561200057600283611ff9919061321c565b92506120d8565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156120425760038361203b919061321c565b92506120d7565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156120835760048361207c919061321c565b92506120d6565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156120c5576005836120be919061321c565b92506120d5565b6006836120d2919061321c565b92505b5b5b5b5b5082806120e5906133c8565b935050611f2c565b829350505050919050565b600080823b905060008111915050919050565b600061216d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121d29092919063ffffffff16565b90506000815111156121cd578080602001905181019061218d9190612550565b6121cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c3906130d9565b60405180910390fd5b5b505050565b60606121e184846000856121ea565b90509392505050565b60608247101561222f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222690613039565b60405180910390fd5b612238856120f8565b612277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226e906130b9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122a09190612e0b565b60006040518083038185875af1925050503d80600081146122dd576040519150601f19603f3d011682016040523d82523d6000602084013e6122e2565b606091505b50915091506122f28282866122fe565b92505050949350505050565b6060831561230e5782905061235e565b6000835111156123215782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123559190612eff565b60405180910390fd5b9392505050565b6000612378612373846131b9565b613194565b90508281526020810184848401111561239057600080fd5b61239b848285613355565b509392505050565b6000813590506123b2816137b1565b92915050565b6000813590506123c7816137c8565b92915050565b6000813590506123dc816137df565b92915050565b6000815190506123f1816137df565b92915050565b600081359050612406816137f6565b92915050565b60008151905061241b816137f6565b92915050565b6000813590506124308161380d565b92915050565b60008135905061244581613824565b92915050565b60008083601f84011261245d57600080fd5b8235905067ffffffffffffffff81111561247657600080fd5b60208301915083600182028301111561248e57600080fd5b9250929050565b600082601f8301126124a657600080fd5b81356124b6848260208601612365565b91505092915050565b6000813590506124ce8161383b565b92915050565b6000815190506124e38161383b565b92915050565b6000813590506124f881613852565b92915050565b60006020828403121561251057600080fd5b600061251e848285016123a3565b91505092915050565b60006020828403121561253957600080fd5b6000612547848285016123b8565b91505092915050565b60006020828403121561256257600080fd5b6000612570848285016123e2565b91505092915050565b60006020828403121561258b57600080fd5b6000612599848285016123f7565b91505092915050565b6000602082840312156125b457600080fd5b60006125c28482850161240c565b91505092915050565b600080600080608085870312156125e157600080fd5b60006125ef878288016123f7565b9450506020612600878288016124e9565b9350506040612611878288016123f7565b9250506060612622878288016123f7565b91505092959194509250565b60006020828403121561264057600080fd5b600061264e84828501612421565b91505092915050565b60006020828403121561266957600080fd5b600061267784828501612436565b91505092915050565b600080600080600080600060c0888a03121561269b57600080fd5b600088013567ffffffffffffffff8111156126b557600080fd5b6126c18a828b0161244b565b975097505060206126d48a828b016123a3565b95505060406126e58a828b016124bf565b94505060606126f68a828b016123f7565b93505060806127078a828b016123cd565b92505060a06127188a828b016124bf565b91505092959891949750929550565b6000806000806060858703121561273d57600080fd5b600085013567ffffffffffffffff81111561275757600080fd5b6127638782880161244b565b94509450506020612776878288016124bf565b9250506040612787878288016123cd565b91505092959194509250565b6000602082840312156127a557600080fd5b600082013567ffffffffffffffff8111156127bf57600080fd5b6127cb84828501612495565b91505092915050565b6000806000606084860312156127e957600080fd5b600084013567ffffffffffffffff81111561280357600080fd5b61280f86828701612495565b9350506020612820868287016123a3565b9250506040612831868287016123f7565b9150509250925092565b600080600080600060a0868803121561285357600080fd5b600086013567ffffffffffffffff81111561286d57600080fd5b61287988828901612495565b955050602061288a888289016123a3565b945050604061289b888289016123f7565b93505060606128ac888289016123a3565b92505060806128bd888289016123a3565b9150509295509295909350565b600080600080600080600080610100898b0312156128e757600080fd5b600089013567ffffffffffffffff81111561290157600080fd5b61290d8b828c01612495565b985050602061291e8b828c016123a3565b975050604061292f8b828c016124bf565b96505060606129408b828c016123f7565b95505060806129518b828c016123a3565b94505060a06129628b828c016123a3565b93505060c06129738b828c016123cd565b92505060e06129848b828c016124bf565b9150509295985092959890939650565b6000806000606084860312156129a957600080fd5b600084013567ffffffffffffffff8111156129c357600080fd5b6129cf86828701612495565b93505060206129e0868287016124bf565b92505060406129f1868287016123cd565b9150509250925092565b600060208284031215612a0d57600080fd5b6000612a1b848285016124d4565b91505092915050565b60008060408385031215612a3757600080fd5b6000612a45858286016124bf565b9250506020612a56858286016124bf565b9150509250929050565b612a69816132a6565b82525050565b612a80612a7b826132a6565b613411565b82525050565b612a8f816132ca565b82525050565b612a9e816132d6565b82525050565b612ab5612ab0826132d6565b613423565b82525050565b6000612ac78385613200565b9350612ad4838584613355565b82840190509392505050565b6000612aeb826131ea565b612af58185613200565b9350612b05818560208601613364565b80840191505092915050565b6000612b1d838561320b565b9350612b2a838584613355565b612b338361349d565b840190509392505050565b6000612b49826131f5565b612b53818561320b565b9350612b63818560208601613364565b612b6c8161349d565b840191505092915050565b6000612b8460208361320b565b9150612b8f826134bb565b602082019050919050565b6000612ba760268361320b565b9150612bb2826134e4565b604082019050919050565b6000612bca60278361320b565b9150612bd582613533565b604082019050919050565b6000612bed60238361320b565b9150612bf882613582565b604082019050919050565b6000612c1060268361320b565b9150612c1b826135d1565b604082019050919050565b6000612c3360378361320b565b9150612c3e82613620565b604082019050919050565b6000612c5660348361320b565b9150612c618261366f565b604082019050919050565b6000612c7960208361320b565b9150612c84826136be565b602082019050919050565b6000612c9c600083613200565b9150612ca7826136e7565b600082019050919050565b6000612cbf601d8361320b565b9150612cca826136ea565b602082019050919050565b6000612ce2602a8361320b565b9150612ced82613713565b604082019050919050565b6000612d0560218361320b565b9150612d1082613762565b604082019050919050565b612d248161333e565b82525050565b6000612d368288612aa4565b602082019150612d468287612a6f565b601482019150612d568286612a6f565b601482019150612d668285612a6f565b601482019150612d768284612aa4565b6020820191508190509695505050505050565b6000612d958286612aa4565b602082019150612da58285612a6f565b601482019150612db58284612aa4565b602082019150819050949350505050565b6000612dd28285612aa4565b602082019150612de28284612aa4565b6020820191508190509392505050565b6000612dff828486612abb565b91508190509392505050565b6000612e178284612ae0565b915081905092915050565b6000612e2d82612c8f565b9150819050919050565b6000602082019050612e4c6000830184612a60565b92915050565b6000606082019050612e676000830186612a60565b612e746020830185612a60565b612e816040830184612d1b565b949350505050565b6000602082019050612e9e6000830184612a86565b92915050565b6000602082019050612eb96000830184612a95565b92915050565b60006060820190508181036000830152612eda818688612b11565b9050612ee96020830185612d1b565b612ef66040830184612d1b565b95945050505050565b60006020820190508181036000830152612f198184612b3e565b905092915050565b60006060820190508181036000830152612f3b8186612b3e565b9050612f4a6020830185612d1b565b612f576040830184612d1b565b949350505050565b600060a0820190508181036000830152612f798188612b3e565b9050612f886020830187612d1b565b612f956040830186612d1b565b612fa26060830185612a86565b612faf6080830184612a60565b9695505050505050565b60006020820190508181036000830152612fd281612b77565b9050919050565b60006020820190508181036000830152612ff281612b9a565b9050919050565b6000602082019050818103600083015261301281612bbd565b9050919050565b6000602082019050818103600083015261303281612be0565b9050919050565b6000602082019050818103600083015261305281612c03565b9050919050565b6000602082019050818103600083015261307281612c26565b9050919050565b6000602082019050818103600083015261309281612c49565b9050919050565b600060208201905081810360008301526130b281612c6c565b9050919050565b600060208201905081810360008301526130d281612cb2565b9050919050565b600060208201905081810360008301526130f281612cd5565b9050919050565b6000602082019050818103600083015261311281612cf8565b9050919050565b600060208201905061312e6000830184612d1b565b92915050565b60006060820190506131496000830186612d1b565b6131566020830185612a60565b6131636040830184612d1b565b949350505050565b60006040820190506131806000830185612d1b565b61318d6020830184612d1b565b9392505050565b600061319e6131af565b90506131aa8282613397565b919050565b6000604051905090565b600067ffffffffffffffff8211156131d4576131d361346e565b5b6131dd8261349d565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006132278261333e565b91506132328361333e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132675761326661343f565b5b828201905092915050565b600061327d8261333e565b91506132888361333e565b92508282101561329b5761329a61343f565b5b828203905092915050565b60006132b18261331e565b9050919050565b60006132c38261331e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000613317826132a6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613382578082015181840152602081019050613367565b83811115613391576000848401525b50505050565b6133a08261349d565b810181811067ffffffffffffffff821117156133bf576133be61346e565b5b80604052505050565b60006133d38261333e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134065761340561343f565b5b600182019050919050565b600061341c8261342d565b9050919050565b6000819050919050565b6000613438826134ae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f5b56616c69646174696f6e5d20456e6f75676820455448206e6f742073656e74600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d2077616c6c657420697320746865207a65726f2060008201527f6164647265737300000000000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d205472616e73666572206f66206665652066616960008201527f6c65640000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d20647765624469737472696275746f724164647260008201527f65737320697320746865207a65726f2061646472657373000000000000000000602082015250565b7f5b56616c69646174696f6e5d20546865206164647265737320646f6573206e6f60008201527f7420636f6e7461696e206120636f6e7472616374000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d20456e6f7567682044574542206e6f742073656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6137ba816132a6565b81146137c557600080fd5b50565b6137d1816132b8565b81146137dc57600080fd5b50565b6137e8816132ca565b81146137f357600080fd5b50565b6137ff816132d6565b811461380a57600080fd5b50565b613816816132e0565b811461382157600080fd5b50565b61382d8161330c565b811461383857600080fd5b50565b6138448161333e565b811461384f57600080fd5b50565b61385b81613348565b811461386657600080fd5b5056fea2646970667358221220571777ab84c06b7dfa21aa74c9255608e972e4e7bb74bb9999112a5da356facc64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063839df945116100b6578063aeb8ce9b1161006f578063aeb8ce9b14610453578063c7f9968214610490578063ce1e09c0146104b9578063cf8fc3b1146104e4578063f2fde38b1461050d578063f49826be146105365761014b565b8063839df9451461033c5780638a95b09f146103795780638d839ffe146103a45780638da5cb5b146103cf57806391fb1aaa146103fa5780639791c097146104165761014b565b80634be2b2ec116101085780634be2b2ec1461024f578063530e784f1461026b57806359192b89146102945780636cfc51e2146102bf578063715018a6146102fc5780637e324479146103135761014b565b806301ffc9a7146101505780630cff2adf1461018d57806328831187146101b65780633ccfd60b146101df5780633d86c52f146101f6578063400713ba14610233575b600080fd5b34801561015c57600080fd5b506101776004803603810190610172919061262e565b610573565b6040516101849190612e89565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af91906125cb565b610779565b005b3480156101c257600080fd5b506101dd60048036038101906101d89190612527565b6107c3565b005b3480156101eb57600080fd5b506101f4610936565b005b34801561020257600080fd5b5061021d6004803603810190610218919061283b565b6109fb565b60405161022a9190612ea4565b60405180910390f35b61024d60048036038101906102489190612680565b610b1e565b005b61026960048036038101906102649190612727565b610b7c565b005b34801561027757600080fd5b50610292600480360381019061028d9190612657565b610e1d565b005b3480156102a057600080fd5b506102a9610f42565b6040516102b69190613119565b60405180910390f35b3480156102cb57600080fd5b506102e660048036038101906102e19190612994565b610f4a565b6040516102f39190613119565b60405180910390f35b34801561030857600080fd5b506103116111b0565b005b34801561031f57600080fd5b5061033a60048036038101906103359190612a24565b611238565b005b34801561034857600080fd5b50610363600480360381019061035e9190612579565b6112c6565b6040516103709190613119565b60405180910390f35b34801561038557600080fd5b5061038e6112de565b60405161039b9190613119565b60405180910390f35b3480156103b057600080fd5b506103b96112e6565b6040516103c69190613119565b60405180910390f35b3480156103db57600080fd5b506103e46112ec565b6040516103f19190612e37565b60405180910390f35b610414600480360381019061040f91906128ca565b611315565b005b34801561042257600080fd5b5061043d60048036038101906104389190612793565b611798565b60405161044a9190612e89565b60405180910390f35b34801561045f57600080fd5b5061047a60048036038101906104759190612793565b6117ae565b6040516104879190612e89565b60405180910390f35b34801561049c57600080fd5b506104b760048036038101906104b291906124fe565b61194f565b005b3480156104c557600080fd5b506104ce611b44565b6040516104db9190613119565b60405180910390f35b3480156104f057600080fd5b5061050b600480360381019061050691906124fe565b611b4a565b005b34801561051957600080fd5b50610534600480360381019061052f91906124fe565b611c0a565b005b34801561054257600080fd5b5061055d600480360381019061055891906127d4565b611d02565b60405161056a9190612ea4565b60405180910390f35b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106e857507facf1a8418b97267ffdb4c11281360744af0ddfe62846b256a04a02acee3a53c37f85f6d1554d9d3ed5c2776e29804063f395dfd65a8dc71f4d1cb6f073d7ee75a37ff14fcbc8f6996b31406143e2613e60bde3c1118cfe166c0aa27ba40ef1033df57ff49826be766d3cc8dc7e4aab3f18eb3d339eb3bce85a7b9144119bbe997b2cc37faeb8ce9b70d5d3f3fba501c34cd61a54703dbe3cfb25bd75d3574635f9ea76837f83e7f6ff8df5fd22801ca995afba5d2bc5cac5264a339adb4a410c5da6c4332418181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061077257507f3d86c52f15403f1a062ec90b8fe0792e3be0a9cb236cd8ee4ec4b45821bd2faa7ff7a169630bfe39d181bbd2e0b758ee9f1a6ddc0eca0932c13225406d06d41653187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b42600454600560008781526020019081526020016000205461079b919061321c565b106107a557600080fd5b42600560008681526020019081526020016000208190555050505050565b6107cb611d1b565b73ffffffffffffffffffffffffffffffffffffffff166107e96112ec565b73ffffffffffffffffffffffffffffffffffffffff161461083f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083690613099565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a690612ff9565b60405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f7e76721cea8dbabf87d986684549c169dcbd01bfefb5082b3ecc54bbe323e77e60405160405180910390a250565b61093e611d1b565b73ffffffffffffffffffffffffffffffffffffffff1661095c6112ec565b73ffffffffffffffffffffffffffffffffffffffff16146109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a990613099565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156109f8573d6000803e3d6000fd5b50565b60008086805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015610a705750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610aa857808686604051602001610a8a93929190612d89565b60405160208183030381529060405280519060200120915050610b15565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610ae257600080fd5b8086858588604051602001610afb959493929190612d2a565b604051602081830303815290604052805190602001209150505b95945050505050565b610b7387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686866000808888611315565b50505050505050565b6000610bcd85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508484610f4a565b905080341015610bdc57600080fd5b60008585604051610bee929190612df2565b604051809103902090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6257600080fd5b505afa158015610c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9a91906125a2565b82604051602001610cac929190612dc6565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c475abff8360001c886040518363ffffffff1660e01b8152600401610d2692919061316b565b602060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7891906129fb565b905083341115610dd5573373ffffffffffffffffffffffffffffffffffffffff166108fc8534610da89190613272565b9081150290604051600060405180830381858888f19350505050158015610dd3573d6000803e3d6000fd5b505b827f3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae89898785604051610e0b9493929190612ebf565b60405180910390a25050505050505050565b610e25611d1b565b73ffffffffffffffffffffffffffffffffffffffff16610e436112ec565b73ffffffffffffffffffffffffffffffffffffffff1614610e99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9090613099565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e912360405160405180910390a250565b6309679a3681565b600080848051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff991906125a2565b8260405160200161100b929190612dc6565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5d93ba987600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6e4fa868560001c6040518263ffffffff1660e01b81526004016110c09190613119565b60206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111091906129fb565b8888600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518663ffffffff1660e01b8152600401611155959493929190612f5f565b60206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a591906129fb565b925050509392505050565b6111b8611d1b565b73ffffffffffffffffffffffffffffffffffffffff166111d66112ec565b73ffffffffffffffffffffffffffffffffffffffff161461122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390613099565b60405180910390fd5b6112366000611d23565b565b611240611d1b565b73ffffffffffffffffffffffffffffffffffffffff1661125e6112ec565b73ffffffffffffffffffffffffffffffffffffffff16146112b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ab90613099565b60405180910390fd5b81600381905550806004819055505050565b60056020528060005260406000206000915090505481565b6301e1853e81565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061132489898888886109fb565b9050611331898883611de7565b50600061133f8a8986610f4a565b905060008a8051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef91906125a2565b82604051602001611401929190612dc6565b60405160208183030381529060405280519060200120905060008073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461145357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca247ac8360001c8e8e6040518463ffffffff1660e01b81526004016114b593929190613134565b602060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150791906129fb565b905086156115c85783861015611552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611549906130f9565b60405180910390fd5b6115c333600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611e94909392919063ffffffff16565b611736565b8334101561160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160290612fb9565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161165390612e22565b60006040518083038185875af1925050503d8060008114611690576040519150601f19603f3d011682016040523d82523d6000602084013e611695565b606091505b50509050806116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090613019565b60405180910390fd5b84341115611734573373ffffffffffffffffffffffffffffffffffffffff166108fc86346117079190613272565b9081150290604051600060405180830381858888f19350505050158015611732573d6000803e3d6000fd5b505b505b8b73ffffffffffffffffffffffffffffffffffffffff16837fca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f8f878560405161178193929190612f21565b60405180910390a350505050505050505050505050565b600060036117a583611f1d565b10159050919050565b600080828051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663faff50a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561182557600080fd5b505afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d91906125a2565b8260405160200161186f929190612dc6565b60405160208183030381529060405280519060200120905061189084611798565b80156119465750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e88260001c6040518263ffffffff1660e01b81526004016118f59190613119565b60206040518083038186803b15801561190d57600080fd5b505afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119459190612550565b5b92505050919050565b611957611d1b565b73ffffffffffffffffffffffffffffffffffffffff166119756112ec565b73ffffffffffffffffffffffffffffffffffffffff16146119cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c290613099565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a0d8173ffffffffffffffffffffffffffffffffffffffff166120f8565b611a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4390613079565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab390613059565b60405180910390fd5b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fe84b1c3567d939c721221cf11dbfa72d4fce11c22142b08ba83babfd72b29abc60405160405180910390a25050565b60045481565b611b52611d1b565b73ffffffffffffffffffffffffffffffffffffffff16611b706112ec565b73ffffffffffffffffffffffffffffffffffffffff1614611bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbd90613099565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611c12611d1b565b73ffffffffffffffffffffffffffffffffffffffff16611c306112ec565b73ffffffffffffffffffffffffffffffffffffffff1614611c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7d90613099565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ced90612fd9565b60405180910390fd5b611cff81611d23565b50565b6000611d128484846000806109fb565b90509392505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000426003546005600085815260200190815260200160002054611e0b919061321c565b1115611e1657600080fd5b426004546005600085815260200190815260200160002054611e38919061321c565b11611e4257600080fd5b611e4b846117ae565b611e5457600080fd5b60056000838152602001908152602001600020600090556301e1853e831015611e7c57600080fd5b6309679a36831115611e8d57600080fd5b9392505050565b611f17846323b872dd60e01b858585604051602401611eb593929190612e52565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061210b565b50505050565b60008060008084519050600092505b808210156120ed576000858381518110611f6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015611fbe57600183611fb7919061321c565b92506120d9565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561200057600283611ff9919061321c565b92506120d8565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156120425760038361203b919061321c565b92506120d7565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156120835760048361207c919061321c565b92506120d6565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156120c5576005836120be919061321c565b92506120d5565b6006836120d2919061321c565b92505b5b5b5b5b5082806120e5906133c8565b935050611f2c565b829350505050919050565b600080823b905060008111915050919050565b600061216d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121d29092919063ffffffff16565b90506000815111156121cd578080602001905181019061218d9190612550565b6121cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c3906130d9565b60405180910390fd5b5b505050565b60606121e184846000856121ea565b90509392505050565b60608247101561222f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222690613039565b60405180910390fd5b612238856120f8565b612277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226e906130b9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122a09190612e0b565b60006040518083038185875af1925050503d80600081146122dd576040519150601f19603f3d011682016040523d82523d6000602084013e6122e2565b606091505b50915091506122f28282866122fe565b92505050949350505050565b6060831561230e5782905061235e565b6000835111156123215782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123559190612eff565b60405180910390fd5b9392505050565b6000612378612373846131b9565b613194565b90508281526020810184848401111561239057600080fd5b61239b848285613355565b509392505050565b6000813590506123b2816137b1565b92915050565b6000813590506123c7816137c8565b92915050565b6000813590506123dc816137df565b92915050565b6000815190506123f1816137df565b92915050565b600081359050612406816137f6565b92915050565b60008151905061241b816137f6565b92915050565b6000813590506124308161380d565b92915050565b60008135905061244581613824565b92915050565b60008083601f84011261245d57600080fd5b8235905067ffffffffffffffff81111561247657600080fd5b60208301915083600182028301111561248e57600080fd5b9250929050565b600082601f8301126124a657600080fd5b81356124b6848260208601612365565b91505092915050565b6000813590506124ce8161383b565b92915050565b6000815190506124e38161383b565b92915050565b6000813590506124f881613852565b92915050565b60006020828403121561251057600080fd5b600061251e848285016123a3565b91505092915050565b60006020828403121561253957600080fd5b6000612547848285016123b8565b91505092915050565b60006020828403121561256257600080fd5b6000612570848285016123e2565b91505092915050565b60006020828403121561258b57600080fd5b6000612599848285016123f7565b91505092915050565b6000602082840312156125b457600080fd5b60006125c28482850161240c565b91505092915050565b600080600080608085870312156125e157600080fd5b60006125ef878288016123f7565b9450506020612600878288016124e9565b9350506040612611878288016123f7565b9250506060612622878288016123f7565b91505092959194509250565b60006020828403121561264057600080fd5b600061264e84828501612421565b91505092915050565b60006020828403121561266957600080fd5b600061267784828501612436565b91505092915050565b600080600080600080600060c0888a03121561269b57600080fd5b600088013567ffffffffffffffff8111156126b557600080fd5b6126c18a828b0161244b565b975097505060206126d48a828b016123a3565b95505060406126e58a828b016124bf565b94505060606126f68a828b016123f7565b93505060806127078a828b016123cd565b92505060a06127188a828b016124bf565b91505092959891949750929550565b6000806000806060858703121561273d57600080fd5b600085013567ffffffffffffffff81111561275757600080fd5b6127638782880161244b565b94509450506020612776878288016124bf565b9250506040612787878288016123cd565b91505092959194509250565b6000602082840312156127a557600080fd5b600082013567ffffffffffffffff8111156127bf57600080fd5b6127cb84828501612495565b91505092915050565b6000806000606084860312156127e957600080fd5b600084013567ffffffffffffffff81111561280357600080fd5b61280f86828701612495565b9350506020612820868287016123a3565b9250506040612831868287016123f7565b9150509250925092565b600080600080600060a0868803121561285357600080fd5b600086013567ffffffffffffffff81111561286d57600080fd5b61287988828901612495565b955050602061288a888289016123a3565b945050604061289b888289016123f7565b93505060606128ac888289016123a3565b92505060806128bd888289016123a3565b9150509295509295909350565b600080600080600080600080610100898b0312156128e757600080fd5b600089013567ffffffffffffffff81111561290157600080fd5b61290d8b828c01612495565b985050602061291e8b828c016123a3565b975050604061292f8b828c016124bf565b96505060606129408b828c016123f7565b95505060806129518b828c016123a3565b94505060a06129628b828c016123a3565b93505060c06129738b828c016123cd565b92505060e06129848b828c016124bf565b9150509295985092959890939650565b6000806000606084860312156129a957600080fd5b600084013567ffffffffffffffff8111156129c357600080fd5b6129cf86828701612495565b93505060206129e0868287016124bf565b92505060406129f1868287016123cd565b9150509250925092565b600060208284031215612a0d57600080fd5b6000612a1b848285016124d4565b91505092915050565b60008060408385031215612a3757600080fd5b6000612a45858286016124bf565b9250506020612a56858286016124bf565b9150509250929050565b612a69816132a6565b82525050565b612a80612a7b826132a6565b613411565b82525050565b612a8f816132ca565b82525050565b612a9e816132d6565b82525050565b612ab5612ab0826132d6565b613423565b82525050565b6000612ac78385613200565b9350612ad4838584613355565b82840190509392505050565b6000612aeb826131ea565b612af58185613200565b9350612b05818560208601613364565b80840191505092915050565b6000612b1d838561320b565b9350612b2a838584613355565b612b338361349d565b840190509392505050565b6000612b49826131f5565b612b53818561320b565b9350612b63818560208601613364565b612b6c8161349d565b840191505092915050565b6000612b8460208361320b565b9150612b8f826134bb565b602082019050919050565b6000612ba760268361320b565b9150612bb2826134e4565b604082019050919050565b6000612bca60278361320b565b9150612bd582613533565b604082019050919050565b6000612bed60238361320b565b9150612bf882613582565b604082019050919050565b6000612c1060268361320b565b9150612c1b826135d1565b604082019050919050565b6000612c3360378361320b565b9150612c3e82613620565b604082019050919050565b6000612c5660348361320b565b9150612c618261366f565b604082019050919050565b6000612c7960208361320b565b9150612c84826136be565b602082019050919050565b6000612c9c600083613200565b9150612ca7826136e7565b600082019050919050565b6000612cbf601d8361320b565b9150612cca826136ea565b602082019050919050565b6000612ce2602a8361320b565b9150612ced82613713565b604082019050919050565b6000612d0560218361320b565b9150612d1082613762565b604082019050919050565b612d248161333e565b82525050565b6000612d368288612aa4565b602082019150612d468287612a6f565b601482019150612d568286612a6f565b601482019150612d668285612a6f565b601482019150612d768284612aa4565b6020820191508190509695505050505050565b6000612d958286612aa4565b602082019150612da58285612a6f565b601482019150612db58284612aa4565b602082019150819050949350505050565b6000612dd28285612aa4565b602082019150612de28284612aa4565b6020820191508190509392505050565b6000612dff828486612abb565b91508190509392505050565b6000612e178284612ae0565b915081905092915050565b6000612e2d82612c8f565b9150819050919050565b6000602082019050612e4c6000830184612a60565b92915050565b6000606082019050612e676000830186612a60565b612e746020830185612a60565b612e816040830184612d1b565b949350505050565b6000602082019050612e9e6000830184612a86565b92915050565b6000602082019050612eb96000830184612a95565b92915050565b60006060820190508181036000830152612eda818688612b11565b9050612ee96020830185612d1b565b612ef66040830184612d1b565b95945050505050565b60006020820190508181036000830152612f198184612b3e565b905092915050565b60006060820190508181036000830152612f3b8186612b3e565b9050612f4a6020830185612d1b565b612f576040830184612d1b565b949350505050565b600060a0820190508181036000830152612f798188612b3e565b9050612f886020830187612d1b565b612f956040830186612d1b565b612fa26060830185612a86565b612faf6080830184612a60565b9695505050505050565b60006020820190508181036000830152612fd281612b77565b9050919050565b60006020820190508181036000830152612ff281612b9a565b9050919050565b6000602082019050818103600083015261301281612bbd565b9050919050565b6000602082019050818103600083015261303281612be0565b9050919050565b6000602082019050818103600083015261305281612c03565b9050919050565b6000602082019050818103600083015261307281612c26565b9050919050565b6000602082019050818103600083015261309281612c49565b9050919050565b600060208201905081810360008301526130b281612c6c565b9050919050565b600060208201905081810360008301526130d281612cb2565b9050919050565b600060208201905081810360008301526130f281612cd5565b9050919050565b6000602082019050818103600083015261311281612cf8565b9050919050565b600060208201905061312e6000830184612d1b565b92915050565b60006060820190506131496000830186612d1b565b6131566020830185612a60565b6131636040830184612d1b565b949350505050565b60006040820190506131806000830185612d1b565b61318d6020830184612d1b565b9392505050565b600061319e6131af565b90506131aa8282613397565b919050565b6000604051905090565b600067ffffffffffffffff8211156131d4576131d361346e565b5b6131dd8261349d565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006132278261333e565b91506132328361333e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132675761326661343f565b5b828201905092915050565b600061327d8261333e565b91506132888361333e565b92508282101561329b5761329a61343f565b5b828203905092915050565b60006132b18261331e565b9050919050565b60006132c38261331e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000613317826132a6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613382578082015181840152602081019050613367565b83811115613391576000848401525b50505050565b6133a08261349d565b810181811067ffffffffffffffff821117156133bf576133be61346e565b5b80604052505050565b60006133d38261333e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134065761340561343f565b5b600182019050919050565b600061341c8261342d565b9050919050565b6000819050919050565b6000613438826134ae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f5b56616c69646174696f6e5d20456e6f75676820455448206e6f742073656e74600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d2077616c6c657420697320746865207a65726f2060008201527f6164647265737300000000000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d205472616e73666572206f66206665652066616960008201527f6c65640000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d20647765624469737472696275746f724164647260008201527f65737320697320746865207a65726f2061646472657373000000000000000000602082015250565b7f5b56616c69646174696f6e5d20546865206164647265737320646f6573206e6f60008201527f7420636f6e7461696e206120636f6e7472616374000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5b56616c69646174696f6e5d20456e6f7567682044574542206e6f742073656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6137ba816132a6565b81146137c557600080fd5b50565b6137d1816132b8565b81146137dc57600080fd5b50565b6137e8816132ca565b81146137f357600080fd5b50565b6137ff816132d6565b811461380a57600080fd5b50565b613816816132e0565b811461382157600080fd5b50565b61382d8161330c565b811461383857600080fd5b50565b6138448161333e565b811461384f57600080fd5b50565b61385b81613348565b811461386657600080fd5b5056fea2646970667358221220571777ab84c06b7dfa21aa74c9255608e972e4e7bb74bb9999112a5da356facc64736f6c63430008040033",
  "devdoc": {
    "details": "A registrar controller for registering and renewing names at fixed cost.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 467,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6164,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "root",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Root)8025"
      },
      {
        "astId": 6167,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "prices",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(PriceOracle)6083"
      },
      {
        "astId": 6169,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "minCommitmentAge",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6171,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "maxCommitmentAge",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6175,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "commitments",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6177,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "approverAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6180,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "dWebToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)641"
      },
      {
        "astId": 6182,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "allowedFeeSlippagePercentage",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6184,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "dwebDistributorAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6186,
        "contract": "contracts/ethregistrar/RootRegistrarController.sol:RootRegistrarController",
        "label": "companyWallet",
        "offset": 0,
        "slot": "10",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)641": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)6083": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(Root)8025": {
        "encoding": "inplace",
        "label": "contract Root",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}