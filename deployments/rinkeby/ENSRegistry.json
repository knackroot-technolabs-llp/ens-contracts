{
  "address": "0x61E3Ee6374AE0d4c04168d666a5dAC7bCFBd57f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDecentraNameController",
          "name": "_decentraNameController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "NewResolver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "NewTTL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "createSubnode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "createSubnodeRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decentraNameController",
      "outputs": [
        {
          "internalType": "contract IDecentraNameController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "recordExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "setRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setSubnodeOwner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "setSubnodeRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "setTTL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "ttl",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58293bfcdea31ce563c7cc0361c74e6bfb47288a5915dd97b60d6feca8dd3d1b",
  "receipt": {
    "to": null,
    "from": "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    "contractAddress": "0x61E3Ee6374AE0d4c04168d666a5dAC7bCFBd57f0",
    "transactionIndex": 27,
    "gasUsed": "1496299",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa6e36d40f9ec0ff09fd3e236de1a9ded9a55acdecf54ba9ef52b4f3c3f800197",
    "transactionHash": "0x58293bfcdea31ce563c7cc0361c74e6bfb47288a5915dd97b60d6feca8dd3d1b",
    "logs": [],
    "blockNumber": 9206712,
    "cumulativeGasUsed": "5436886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x53213ecAB90Bc6e32D83E405910aB27F23635fEE"
  ],
  "solcInputHash": "0b79b25cb1900741c41640500f9b6f57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDecentraNameController\",\"name\":\"_decentraNameController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createSubnode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"createSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decentraNameController\",\"outputs\":[{\"internalType\":\"contract IDecentraNameController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructs a new ENS registrar.\"},\"createSubnode(bytes32,bytes32,address)\":{\"details\":\"Create a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\",\"params\":{\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\",\"owner\":\"The address of the new owner.\"}},\"createSubnodeRecord(bytes32,bytes32,address,address,uint64)\":{\"details\":\"Create subdomain and sets the record for a subnode.\",\"params\":{\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\",\"owner\":\"The address of the new owner.\",\"resolver\":\"The address of the resolver.\",\"ttl\":\"The TTL in seconds.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Query if an address is an authorized operator for another address.\",\"params\":{\"operator\":\"The address that acts on behalf of the owner.\",\"owner\":\"The address that owns the records.\"},\"returns\":{\"_0\":\"True if `operator` is an approved operator for `owner`, false otherwise.\"}},\"owner(bytes32)\":{\"details\":\"Returns the address that owns the specified node.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"address of the owner.\"}},\"recordExists(bytes32)\":{\"details\":\"Returns whether a record has been imported to the registry.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"Bool if record exists\"}},\"resolver(bytes32)\":{\"details\":\"Returns the address of the resolver for the specified node.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"address of the resolver.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\",\"params\":{\"approved\":\"True if the operator is approved, false to revoke approval.\",\"operator\":\"Address to add to the set of authorized operators.\"}},\"setOwner(bytes32,address)\":{\"details\":\"Transfers ownership of a node to a new address. May only be called by the current owner of the node.\",\"params\":{\"node\":\"The node to transfer ownership of.\",\"owner\":\"The address of the new owner.\"}},\"setRecord(bytes32,address,address,uint64)\":{\"details\":\"Sets the record for a node.\",\"params\":{\"node\":\"The node to update.\",\"owner\":\"The address of the new owner.\",\"resolver\":\"The address of the resolver.\",\"ttl\":\"The TTL in seconds.\"}},\"setResolver(bytes32,address)\":{\"details\":\"Sets the resolver address for the specified node.\",\"params\":{\"node\":\"The node to update.\",\"resolver\":\"The address of the resolver.\"}},\"setSubnodeOwner(bytes32,bytes32,address)\":{\"details\":\"Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\",\"params\":{\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\",\"owner\":\"The address of the new owner.\"}},\"setSubnodeRecord(bytes32,bytes32,address,address,uint64)\":{\"details\":\"Sets the record for a subnode.\",\"params\":{\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\",\"owner\":\"The address of the new owner.\",\"resolver\":\"The address of the resolver.\",\"ttl\":\"The TTL in seconds.\"}},\"setTTL(bytes32,uint64)\":{\"details\":\"Sets the TTL for the specified node.\",\"params\":{\"node\":\"The node to update.\",\"ttl\":\"The TTL in seconds.\"}},\"ttl(bytes32)\":{\"details\":\"Returns the TTL of a node, and any records associated with it.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"ttl of the node.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The ENS registry contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/ENSRegistry.sol\":\"ENSRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/decentraname/IDecentraNameController.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\n\\r\\ninterface IDecentraNameController {\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function existsToken(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function burnToken(uint256 tokenId) external;\\r\\n\\r\\n    function mintToken(address owner, uint256 id) external;\\r\\n\\r\\n    function mintTokenForTLD(address owner, uint256 id) external;\\r\\n\\r\\n    function transferToken(address to, uint256 id) external;\\r\\n}\",\"keccak256\":\"0xa8ff6a1ab734c511ad20eecfebd5be3b533c937a0e9b140a3fe091454639ac81\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\r\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\r\\n    function createSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\r\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\r\\n    function setResolver(bytes32 node, address resolver) external virtual;\\r\\n    function setOwner(bytes32 node, address owner) external virtual;\\r\\n    function createSubnode(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\r\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\r\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\r\\n    function owner(bytes32 node) external virtual view returns (address);\\r\\n    function resolver(bytes32 node) external virtual view returns (address);\\r\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\r\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\r\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7d8535619a015dc2405643fd354776094994c1c73321f1ddf56bfc14d2b5bb1\"},\"contracts/registry/ENSRegistry.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./ENS.sol\\\";\\r\\nimport \\\"../decentraname/IDecentraNameController.sol\\\";\\r\\n\\r\\n/**\\r\\n * The ENS registry contract.\\r\\n */\\r\\ncontract ENSRegistry is ENS {\\r\\n\\r\\n    struct Record {\\r\\n        address resolver;\\r\\n        uint64 ttl;\\r\\n    }\\r\\n\\r\\n    mapping (bytes32 => Record) records;\\r\\n    mapping (address => mapping(address => bool)) operators;\\r\\n\\r\\n    // The dweb NFT token\\r\\n    IDecentraNameController public decentraNameController;\\r\\n\\r\\n    // Permits modifications only by the owner of the specified node.\\r\\n    modifier authorised(bytes32 node) {\\r\\n        address owner = decentraNameController.ownerOf(uint256(node));\\r\\n        require(owner == msg.sender || operators[owner][msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Constructs a new ENS registrar.\\r\\n     */\\r\\n    constructor(IDecentraNameController _decentraNameController) public {\\r\\n        decentraNameController = _decentraNameController;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a node.\\r\\n     * @param node The node to update.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual override {\\r\\n        setOwner(node, owner);\\r\\n        _setResolverAndTTL(node, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a subnode.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual override {\\r\\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\\r\\n        _setResolverAndTTL(subnode, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create subdomain and sets the record for a subnode.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function createSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual override {\\r\\n        // TODO: revisit for modifier\\r\\n        bytes32 subnode = createSubnode(node, label, owner);\\r\\n        _setResolverAndTTL(subnode, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\r\\n     * @param node The node to transfer ownership of.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setOwner(bytes32 node, address owner) public virtual override authorised(node) {\\r\\n        // TODO: revisit authorized node because msg.sender won't be owner if called from other contracts\\r\\n        _setOwner(node, owner);\\r\\n        emit Transfer(node, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function createSubnode(bytes32 node, bytes32 label, address owner) public virtual override authorised(node) returns(bytes32) {\\r\\n        // TODO: revisit authorized node because msg.sender won't be owner if called from other contracts\\r\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\r\\n        _createNode(subnode, owner);\\r\\n        emit NewOwner(node, label, owner);\\r\\n        return subnode;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public virtual override authorised(node) returns(bytes32) {\\r\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\r\\n        _setOwner(subnode, owner);\\r\\n        emit NewOwner(node, label, owner);\\r\\n        return subnode;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the resolver address for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param resolver The address of the resolver.\\r\\n     */\\r\\n    function setResolver(bytes32 node, address resolver) public virtual override authorised(node) {\\r\\n        emit NewResolver(node, resolver);\\r\\n        records[node].resolver = resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TTL for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setTTL(bytes32 node, uint64 ttl) public virtual override authorised(node) {\\r\\n        emit NewTTL(node, ttl);\\r\\n        records[node].ttl = ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\\r\\n     * @param operator Address to add to the set of authorized operators.\\r\\n     * @param approved True if the operator is approved, false to revoke approval.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\r\\n        operators[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that owns the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the owner.\\r\\n     */\\r\\n    function owner(bytes32 node) public virtual override view returns (address) {\\r\\n        address addr = decentraNameController.ownerOf(uint256(node));\\r\\n        // TODO: what is the impact of below after all code changes?\\r\\n        if (addr == address(this)) {\\r\\n            return address(0x0);\\r\\n        }\\r\\n\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the resolver for the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the resolver.\\r\\n     */\\r\\n    function resolver(bytes32 node) public virtual override view returns (address) {\\r\\n        return records[node].resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the TTL of a node, and any records associated with it.\\r\\n     * @param node The specified node.\\r\\n     * @return ttl of the node.\\r\\n     */\\r\\n    function ttl(bytes32 node) public virtual override view returns (uint64) {\\r\\n        return records[node].ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a record has been imported to the registry.\\r\\n     * @param node The specified node.\\r\\n     * @return Bool if record exists\\r\\n     */\\r\\n    function recordExists(bytes32 node) public virtual override view returns (bool) {\\r\\n        return decentraNameController.existsToken(uint256(node));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Query if an address is an authorized operator for another address.\\r\\n     * @param owner The address that owns the records.\\r\\n     * @param operator The address that acts on behalf of the owner.\\r\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external virtual override view returns (bool) {\\r\\n        return operators[owner][operator];\\r\\n    }\\r\\n\\r\\n    function _setOwner(bytes32 node, address owner) internal virtual {\\r\\n        decentraNameController.transferToken(owner, uint256(node));\\r\\n    }\\r\\n\\r\\n    function _createNode(bytes32 node, address owner) internal virtual {\\r\\n        decentraNameController.mintToken(owner, uint256(node));\\r\\n    }\\r\\n\\r\\n    function _setResolverAndTTL(bytes32 node, address resolver, uint64 ttl) internal {\\r\\n        if(resolver != records[node].resolver) {\\r\\n            records[node].resolver = resolver;\\r\\n            emit NewResolver(node, resolver);\\r\\n        }\\r\\n\\r\\n        if(ttl != records[node].ttl) {\\r\\n            records[node].ttl = ttl;\\r\\n            emit NewTTL(node, ttl);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa6cd9d7c54d5e23c4e5efa5fa153f329352858dd6d4952ccef6eaff64f9e1f5d\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ad738038062001ad7833981810160405281019062000037919062000096565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000124565b60008151905062000090816200010a565b92915050565b600060208284031215620000a957600080fd5b6000620000b9848285016200007f565b91505092915050565b6000620000cf82620000ea565b9050919050565b6000620000e382620000c2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011581620000d6565b81146200012157600080fd5b50565b6119a380620001346000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80632aba87ff11610097578063a22cb46511610066578063a22cb46514610294578063cf408823146102b0578063e985e9c5146102cc578063f79fe538146102fc576100f5565b80632aba87ff146102105780633ac51e141461022c5780635b0fc9c31461025c5780635ef2c7f014610278576100f5565b806314ab9038116100d357806314ab90381461018a57806316a25cbd146101a65780631896f70a146101d65780631d5fe565146101f2576100f5565b80630178b8bf146100fa57806302571be31461012a57806306ab59231461015a575b600080fd5b610114600480360381019061010f919061154b565b61032c565b60405161012191906117b2565b60405180910390f35b610144600480360381019061013f919061154b565b61036b565b60405161015191906117b2565b60405180910390f35b610174600480360381019061016f9190611613565b610466565b6040516101819190611811565b60405180910390f35b6101a4600480360381019061019f91906116d9565b610661565b005b6101c060048036038101906101bb919061154b565b610857565b6040516101cd9190611862565b60405180910390f35b6101f060048036038101906101eb9190611574565b61088a565b005b6101fa610a98565b604051610207919061182c565b60405180910390f35b61022a60048036038101906102259190611662565b610abe565b005b61024660048036038101906102419190611613565b610ae0565b6040516102539190611811565b60405180910390f35b61027660048036038101906102719190611574565b610cdb565b005b610292600480360381019061028d9190611662565b610e9f565b005b6102ae60048036038101906102a991906114e6565b610ec1565b005b6102ca60048036038101906102c591906115b0565b610fbe565b005b6102e660048036038101906102e191906114aa565b610fd9565b6040516102f391906117f6565b60405180910390f35b6103166004803603810190610311919061154b565b61106d565b60405161032391906117f6565b60405180910390f35b600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8460001c6040518263ffffffff1660e01b81526004016103cc9190611847565b60206040518083038186803b1580156103e457600080fd5b505afa1580156103f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041c9190611481565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561045c576000915050610461565b809150505b919050565b6000836000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8360001c6040518263ffffffff1660e01b81526004016104c99190611847565b60206040518083038186803b1580156104e157600080fd5b505afa1580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105199190611481565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806105db5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6105e457600080fd5b600086866040516020016105f9929190611786565b60405160208183030381529060405280519060200120905061061b8186611124565b85877fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e828760405161064c91906117b2565b60405180910390a38093505050509392505050565b816000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8360001c6040518263ffffffff1660e01b81526004016106c29190611847565b60206040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190611481565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806107d45750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6107dd57600080fd5b837f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa688460405161080d9190611862565b60405180910390a28260008086815260200190815260200160002060000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b600080600083815260200190815260200160002060000160149054906101000a900467ffffffffffffffff169050919050565b816000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8360001c6040518263ffffffff1660e01b81526004016108eb9190611847565b60206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190611481565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806109fd5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610a0657600080fd5b837f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a084604051610a3691906117b2565b60405180910390a28260008086815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610acb868686610ae0565b9050610ad88184846111ba565b505050505050565b6000836000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8360001c6040518263ffffffff1660e01b8152600401610b439190611847565b60206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190611481565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610c555750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610c5e57600080fd5b60008686604051602001610c73929190611786565b604051602081830303815290604052805190602001209050610c95818661136d565b85877fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e8287604051610cc691906117b2565b60405180910390a38093505050509392505050565b816000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8360001c6040518263ffffffff1660e01b8152600401610d3c9190611847565b60206040518083038186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c9190611481565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610e4e5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610e5757600080fd5b610e618484611124565b837fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d26684604051610e9191906117b2565b60405180910390a250505050565b6000610eac868686610466565b9050610eb98184846111ba565b505050505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610fb291906117f6565b60405180910390a35050565b610fc88484610cdb565b610fd38483836111ba565b50505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b0468b68360001c6040518263ffffffff1660e01b81526004016110cd9190611847565b60206040518083038186803b1580156110e557600080fd5b505afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d9190611522565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631072cbea828460001c6040518363ffffffff1660e01b81526004016111849291906117cd565b600060405180830381600087803b15801561119e57600080fd5b505af11580156111b2573d6000803e3d6000fd5b505050505050565b60008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146112af578160008085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0836040516112a691906117b2565b60405180910390a25b60008084815260200190815260200160002060000160149054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1614611368578060008085815260200190815260200160002060000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550827f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa688260405161135f9190611862565b60405180910390a25b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c65068828460001c6040518363ffffffff1660e01b81526004016113cd9291906117cd565b600060405180830381600087803b1580156113e757600080fd5b505af11580156113fb573d6000803e3d6000fd5b505050505050565b60008135905061141281611911565b92915050565b60008151905061142781611911565b92915050565b60008135905061143c81611928565b92915050565b60008151905061145181611928565b92915050565b6000813590506114668161193f565b92915050565b60008135905061147b81611956565b92915050565b60006020828403121561149357600080fd5b60006114a184828501611418565b91505092915050565b600080604083850312156114bd57600080fd5b60006114cb85828601611403565b92505060206114dc85828601611403565b9150509250929050565b600080604083850312156114f957600080fd5b600061150785828601611403565b92505060206115188582860161142d565b9150509250929050565b60006020828403121561153457600080fd5b600061154284828501611442565b91505092915050565b60006020828403121561155d57600080fd5b600061156b84828501611457565b91505092915050565b6000806040838503121561158757600080fd5b600061159585828601611457565b92505060206115a685828601611403565b9150509250929050565b600080600080608085870312156115c657600080fd5b60006115d487828801611457565b94505060206115e587828801611403565b93505060406115f687828801611403565b92505060606116078782880161146c565b91505092959194509250565b60008060006060848603121561162857600080fd5b600061163686828701611457565b935050602061164786828701611457565b925050604061165886828701611403565b9150509250925092565b600080600080600060a0868803121561167a57600080fd5b600061168888828901611457565b955050602061169988828901611457565b94505060406116aa88828901611403565b93505060606116bb88828901611403565b92505060806116cc8882890161146c565b9150509295509295909350565b600080604083850312156116ec57600080fd5b60006116fa85828601611457565b925050602061170b8582860161146c565b9150509250929050565b61171e8161187d565b82525050565b61172d8161188f565b82525050565b61173c8161189b565b82525050565b61175361174e8261189b565b611907565b82525050565b611762816118e3565b82525050565b611771816118c5565b82525050565b611780816118cf565b82525050565b60006117928285611742565b6020820191506117a28284611742565b6020820191508190509392505050565b60006020820190506117c76000830184611715565b92915050565b60006040820190506117e26000830185611715565b6117ef6020830184611768565b9392505050565b600060208201905061180b6000830184611724565b92915050565b60006020820190506118266000830184611733565b92915050565b60006020820190506118416000830184611759565b92915050565b600060208201905061185c6000830184611768565b92915050565b60006020820190506118776000830184611777565b92915050565b6000611888826118a5565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006118ee826118f5565b9050919050565b6000611900826118a5565b9050919050565b6000819050919050565b61191a8161187d565b811461192557600080fd5b50565b6119318161188f565b811461193c57600080fd5b50565b6119488161189b565b811461195357600080fd5b50565b61195f816118cf565b811461196a57600080fd5b5056fea26469706673582212209384167cf90974c659c2a125555b3831dd43a7339f3d91031bbfab9fd1f753e664736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructs a new ENS registrar."
      },
      "createSubnode(bytes32,bytes32,address)": {
        "details": "Create a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
        "params": {
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node.",
          "owner": "The address of the new owner."
        }
      },
      "createSubnodeRecord(bytes32,bytes32,address,address,uint64)": {
        "details": "Create subdomain and sets the record for a subnode.",
        "params": {
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node.",
          "owner": "The address of the new owner.",
          "resolver": "The address of the resolver.",
          "ttl": "The TTL in seconds."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Query if an address is an authorized operator for another address.",
        "params": {
          "operator": "The address that acts on behalf of the owner.",
          "owner": "The address that owns the records."
        },
        "returns": {
          "_0": "True if `operator` is an approved operator for `owner`, false otherwise."
        }
      },
      "owner(bytes32)": {
        "details": "Returns the address that owns the specified node.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "address of the owner."
        }
      },
      "recordExists(bytes32)": {
        "details": "Returns whether a record has been imported to the registry.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "Bool if record exists"
        }
      },
      "resolver(bytes32)": {
        "details": "Returns the address of the resolver for the specified node.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "address of the resolver."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.",
        "params": {
          "approved": "True if the operator is approved, false to revoke approval.",
          "operator": "Address to add to the set of authorized operators."
        }
      },
      "setOwner(bytes32,address)": {
        "details": "Transfers ownership of a node to a new address. May only be called by the current owner of the node.",
        "params": {
          "node": "The node to transfer ownership of.",
          "owner": "The address of the new owner."
        }
      },
      "setRecord(bytes32,address,address,uint64)": {
        "details": "Sets the record for a node.",
        "params": {
          "node": "The node to update.",
          "owner": "The address of the new owner.",
          "resolver": "The address of the resolver.",
          "ttl": "The TTL in seconds."
        }
      },
      "setResolver(bytes32,address)": {
        "details": "Sets the resolver address for the specified node.",
        "params": {
          "node": "The node to update.",
          "resolver": "The address of the resolver."
        }
      },
      "setSubnodeOwner(bytes32,bytes32,address)": {
        "details": "Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
        "params": {
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node.",
          "owner": "The address of the new owner."
        }
      },
      "setSubnodeRecord(bytes32,bytes32,address,address,uint64)": {
        "details": "Sets the record for a subnode.",
        "params": {
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node.",
          "owner": "The address of the new owner.",
          "resolver": "The address of the resolver.",
          "ttl": "The TTL in seconds."
        }
      },
      "setTTL(bytes32,uint64)": {
        "details": "Sets the TTL for the specified node.",
        "params": {
          "node": "The node to update.",
          "ttl": "The TTL in seconds."
        }
      },
      "ttl(bytes32)": {
        "details": "Returns the TTL of a node, and any records associated with it.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "ttl of the node."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The ENS registry contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11833,
        "contract": "contracts/registry/ENSRegistry.sol:ENSRegistry",
        "label": "records",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Record)11828_storage)"
      },
      {
        "astId": 11839,
        "contract": "contracts/registry/ENSRegistry.sol:ENSRegistry",
        "label": "operators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11842,
        "contract": "contracts/registry/ENSRegistry.sol:ENSRegistry",
        "label": "decentraNameController",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDecentraNameController)2573"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDecentraNameController)2573": {
        "encoding": "inplace",
        "label": "contract IDecentraNameController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Record)11828_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSRegistry.Record)",
        "numberOfBytes": "32",
        "value": "t_struct(Record)11828_storage"
      },
      "t_struct(Record)11828_storage": {
        "encoding": "inplace",
        "label": "struct ENSRegistry.Record",
        "members": [
          {
            "astId": 11825,
            "contract": "contracts/registry/ENSRegistry.sol:ENSRegistry",
            "label": "resolver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11827,
            "contract": "contracts/registry/ENSRegistry.sol:ENSRegistry",
            "label": "ttl",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}