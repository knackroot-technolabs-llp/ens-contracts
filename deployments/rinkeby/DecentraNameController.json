{
  "address": "0x56FffE3218156288941Ab87B511E93ff128D8162",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burnToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decentraName",
      "outputs": [
        {
          "internalType": "contract DecentraName",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "existsToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "transferTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1da9c8cdf2f688f9badc636e0db7aecbc0a3fb2c811ab0df13005741f9515771",
  "receipt": {
    "to": null,
    "from": "0x4CeBBdbBdFe8A1BB3F62A75B5fe9ebaE5D105f8F",
    "contractAddress": "0x56FffE3218156288941Ab87B511E93ff128D8162",
    "transactionIndex": 19,
    "gasUsed": "3992380",
    "logsBloom": "0x
    "blockHash": "0x50a0bbeb246e9c6eebbcc5a360251661003515e0066e6f1c3eeb082593741c37",
    "transactionHash": "0x1da9c8cdf2f688f9badc636e0db7aecbc0a3fb2c811ab0df13005741f9515771",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 9251773,
        "transactionHash": "0x1da9c8cdf2f688f9badc636e0db7aecbc0a3fb2c811ab0df13005741f9515771",
        "address": "0x56FffE3218156288941Ab87B511E93ff128D8162",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cebbdbbdfe8a1bb3f62a75b5fe9ebae5d105f8f"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x50a0bbeb246e9c6eebbcc5a360251661003515e0066e6f1c3eeb082593741c37"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 9251773,
        "transactionHash": "0x1da9c8cdf2f688f9badc636e0db7aecbc0a3fb2c811ab0df13005741f9515771",
        "address": "0x8b6055781E431112184d5c9eae30607B162ddB69",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000056fffe3218156288941ab87b511e93ff128d8162"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x50a0bbeb246e9c6eebbcc5a360251661003515e0066e6f1c3eeb082593741c37"
      }
    ],
    "blockNumber": 9251773,
    "cumulativeGasUsed": "7620018",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8acfa5d5fc60624983e398adee1f7112",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decentraName\",\"outputs\":[{\"internalType\":\"contract DecentraName\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"existsToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/decentraname/DecentraNameController.sol\":\"DecentraNameController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/decentraname/DecentraName.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DecentraName is ERC721, Ownable {\\n\\n    bytes4 constant private INTERFACE_META_ID = 0x01ffc9a7;\\n    bytes4 constant private ERC721_ID = bytes4(\\n        keccak256(\\\"balanceOf(address)\\\") ^\\n        keccak256(\\\"ownerOf(uint256)\\\") ^\\n        keccak256(\\\"approve(address,uint256)\\\") ^\\n        keccak256(\\\"getApproved(uint256)\\\") ^\\n        keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\n        keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\n        keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\n        keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\n        keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\n    );\\n\\n    /* TODO: UI has to call setApprovalForAll(<address of DecentraNameController>, true) on this contract before doing registration/transfer. \\n     *       transaction must be signed by owner of token.\\n     */\\n\\n    // TODO: update token name and description\\n    constructor() ERC721(\\\"DCN\\\",\\\"DecentraName\\\") {\\n    }\\n\\n    /**\\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\\n     * @dev Returns whether the given spender can transfer a given token ID\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual override(ERC721) returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID. Names become unowned\\n     *      when their registration expires.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override(ERC721) returns (address) {\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function isApprovedOrOwner(address spender, uint256 tokenId) public view virtual returns (bool) {\\n        return _isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     * @param tokenId uint256 ID of the token\\n     * @return * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function existsToken(uint256 tokenId) public view virtual returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * @param tokenId uint256 ID of the token\\n     */\\n    function burnToken(uint256 tokenId) public virtual onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     * @param owner owner of the token to be set after mint\\n     * @param id uint256 ID of the token\\n     */\\n    function mintToken(address owner, uint256 id) public virtual onlyOwner {\\n        _safeMint(owner, id);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` to `to`.\\n     * @param to transfer token to this address\\n     * @param id uint256 ID of the token\\n     */\\n    function transferToken(address to, uint256 id) public virtual onlyOwner{\\n        address from = super.ownerOf(id);\\n        safeTransferFrom(from, to, id);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public override(ERC721) view returns (bool) {\\n        return interfaceID == INTERFACE_META_ID ||\\n               interfaceID == ERC721_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xb9653ec457eb001f9e242313def7c33c8f8a9ea5284b5428fe6d7291ec450107\"},\"contracts/decentraname/DecentraNameController.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./DecentraName.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\nimport \\\"./IDecentraNameController.sol\\\";\\n\\ncontract DecentraNameController is IDecentraNameController, Controllable {\\n\\n    DecentraName public decentraName;\\n\\n    \\n\\n    constructor() {\\n        decentraName = new DecentraName();\\n    }\\n\\n    function ownerOf(uint256 tokenId) external virtual override view returns (address) {\\n        return decentraName.ownerOf(tokenId);\\n    }\\n\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external virtual override view returns (bool) {\\n        return decentraName.isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    // This method only returns if token alredy mint or not. to know if token is valid and not expired use root.available\\n    function existsToken(uint256 tokenId) external virtual override view returns (bool) {\\n        return decentraName.existsToken(tokenId);\\n    }\\n\\n    function burnToken(uint256 tokenId) external virtual override onlyController {\\n        /* TODO: signature verification has to be done before calling burn on dweb token. \\n         *       Additional param may required for this method. It can be called bycontroller\\n         * TODO: should we use expiry here\\n         */\\n        decentraName.burnToken(tokenId);\\n    }\\n\\n    function mintToken(address owner, uint256 id) external virtual override onlyController {\\n        decentraName.mintToken(owner, id);\\n    }\\n\\n    // sender should be the one who owns token id\\n    // this contract must be approved for sender address\\n    function transferToken(address transferTo, uint256 id, uint8 v, bytes32 r, bytes32 s, address sender) external virtual override onlyController {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        bytes32 eip712DomainHash = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(\\\"decentraname\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        ); \\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                keccak256(\\\"transferToken(address transferTo,uint256 id)\\\"),\\n                transferTo,\\n                id\\n            )\\n        );\\n\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", eip712DomainHash, hashStruct));\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer == sender, \\\"transferToken: invalid signature\\\");\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        decentraName.transferToken(transferTo, id);\\n    }\\n\\n}\",\"keccak256\":\"0x518ef0b5e4fcd0a153dcee51c3b07684d92ab4ecbcccc7a3e15262ca7efd775b\"},\"contracts/decentraname/IDecentraNameController.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n\\ninterface IDecentraNameController {\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n    function existsToken(uint256 tokenId) external view returns (bool);\\n\\n    function burnToken(uint256 tokenId) external;\\n\\n    function mintToken(address owner, uint256 id) external;\\n\\n    function transferToken(address to, uint256 id, uint8 v, bytes32 r, bytes32 s, address sender) external;\\n}\",\"keccak256\":\"0xd13a96fd50ca659fecda44de57ed353f718d929e1197a0dc33844811ccb2f026\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261009b60201b60201c565b6100a360201b60201c565b60405161003990610167565b604051809103906000f080158015610055573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610175565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6130f380620017f983390190565b61167480620001856000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461018b578063ba6c1418146101a9578063da8c229e146101c5578063e0dba60f146101f5578063f2fde38b14610211578063fae007421461022d576100b4565b80633b0468b6146100b9578063430c2081146100e95780636352211e14610119578063715018a61461014957806379c65068146101535780637b47ec1a1461016f575b600080fd5b6100d360048036038101906100ce9190611039565b61024b565b6040516100e09190611220565b60405180910390f35b61010360048036038101906100fe9190610f4b565b6102ff565b6040516101109190611220565b60405180910390f35b610133600480360381019061012e9190611039565b6103b6565b60405161014091906111dc565b60405180910390f35b61015161046a565b005b61016d60048036038101906101689190610f4b565b6104f2565b005b61018960048036038101906101849190611039565b610611565b005b61019361072d565b6040516101a091906111dc565b60405180910390f35b6101c360048036038101906101be9190610f87565b610756565b005b6101df60048036038101906101da9190610ebd565b610afb565b6040516101ec9190611220565b60405180910390f35b61020f600480360381019061020a9190610f0f565b610b1b565b005b61022b60048036038101906102269190610ebd565b610c40565b005b610235610d38565b604051610242919061130a565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b0468b6836040518263ffffffff1660e01b81526004016102a891906113c5565b60206040518083038186803b1580156102c057600080fd5b505afa1580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f89190611010565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663430c208184846040518363ffffffff1660e01b815260040161035e9291906111f7565b60206040518083038186803b15801561037657600080fd5b505afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae9190611010565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161041391906113c5565b60206040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190610ee6565b9050919050565b610472610d5e565b73ffffffffffffffffffffffffffffffffffffffff1661049061072d565b73ffffffffffffffffffffffffffffffffffffffff16146104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90611385565b60405180910390fd5b6104f06000610d66565b565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611365565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c6506883836040518363ffffffff1660e01b81526004016105db9291906111f7565b600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069490611365565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b47ec1a826040518263ffffffff1660e01b81526004016106f891906113c5565b600060405180830381600087803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d990611365565b60405180910390fd5b600046905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600c81526020017f646563656e7472616e616d650000000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525080519060200120843060405160200161089a959493929190611272565b60405160208183030381529060405280519060200120905060007fd40888cf67bae62548289d766b50d28607cfd4eda4d7664f5e6de8517148524489896040516020016108e99392919061123b565b604051602081830303815290604052805190602001209050600082826040516020016109169291906111a5565b60405160208183030381529060405280519060200120905060006001828a8a8a6040516000815260200160405260405161095394939291906112c5565b6020604051602081039080840390855afa158015610975573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e6906113a5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5690611325565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631072cbea8c8c6040518363ffffffff1660e01b8152600401610abc9291906111f7565b600060405180830381600087803b158015610ad657600080fd5b505af1158015610aea573d6000803e3d6000fd5b505050505050505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b610b23610d5e565b73ffffffffffffffffffffffffffffffffffffffff16610b4161072d565b73ffffffffffffffffffffffffffffffffffffffff1614610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e90611385565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf8782604051610c349190611220565b60405180910390a25050565b610c48610d5e565b73ffffffffffffffffffffffffffffffffffffffff16610c6661072d565b73ffffffffffffffffffffffffffffffffffffffff1614610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390611385565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2390611345565b60405180910390fd5b610d3581610d66565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610e39816115cb565b92915050565b600081519050610e4e816115cb565b92915050565b600081359050610e63816115e2565b92915050565b600081519050610e78816115e2565b92915050565b600081359050610e8d816115f9565b92915050565b600081359050610ea281611610565b92915050565b600081359050610eb781611627565b92915050565b600060208284031215610ecf57600080fd5b6000610edd84828501610e2a565b91505092915050565b600060208284031215610ef857600080fd5b6000610f0684828501610e3f565b91505092915050565b60008060408385031215610f2257600080fd5b6000610f3085828601610e2a565b9250506020610f4185828601610e54565b9150509250929050565b60008060408385031215610f5e57600080fd5b6000610f6c85828601610e2a565b9250506020610f7d85828601610e93565b9150509250929050565b60008060008060008060c08789031215610fa057600080fd5b6000610fae89828a01610e2a565b9650506020610fbf89828a01610e93565b9550506040610fd089828a01610ea8565b9450506060610fe189828a01610e7e565b9350506080610ff289828a01610e7e565b92505060a061100389828a01610e2a565b9150509295509295509295565b60006020828403121561102257600080fd5b600061103084828501610e69565b91505092915050565b60006020828403121561104b57600080fd5b600061105984828501610e93565b91505092915050565b61106b816113fc565b82525050565b61107a8161140e565b82525050565b6110898161141a565b82525050565b6110a061109b8261141a565b61147f565b82525050565b6110af8161145b565b82525050565b60006110c26018836113e0565b91506110cd82611489565b602082019050919050565b60006110e56026836113e0565b91506110f0826114b2565b604082019050919050565b60006111086002836113f1565b915061111382611501565b600282019050919050565b600061112b6028836113e0565b91506111368261152a565b604082019050919050565b600061114e6020836113e0565b915061115982611579565b602082019050919050565b60006111716020836113e0565b915061117c826115a2565b602082019050919050565b61119081611444565b82525050565b61119f8161144e565b82525050565b60006111b0826110fb565b91506111bc828561108f565b6020820191506111cc828461108f565b6020820191508190509392505050565b60006020820190506111f16000830184611062565b92915050565b600060408201905061120c6000830185611062565b6112196020830184611187565b9392505050565b60006020820190506112356000830184611071565b92915050565b60006060820190506112506000830186611080565b61125d6020830185611062565b61126a6040830184611187565b949350505050565b600060a0820190506112876000830188611080565b6112946020830187611080565b6112a16040830186611080565b6112ae6060830185611187565b6112bb6080830184611062565b9695505050505050565b60006080820190506112da6000830187611080565b6112e76020830186611196565b6112f46040830185611080565b6113016060830184611080565b95945050505050565b600060208201905061131f60008301846110a6565b92915050565b6000602082019050818103600083015261133e816110b5565b9050919050565b6000602082019050818103600083015261135e816110d8565b9050919050565b6000602082019050818103600083015261137e8161111e565b9050919050565b6000602082019050818103600083015261139e81611141565b9050919050565b600060208201905081810360008301526113be81611164565b9050919050565b60006020820190506113da6000830184611187565b92915050565b600082825260208201905092915050565b600081905092915050565b600061140782611424565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006114668261146d565b9050919050565b600061147882611424565b9050919050565b6000819050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60008201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f7472616e73666572546f6b656e3a20696e76616c6964207369676e6174757265600082015250565b6115d4816113fc565b81146115df57600080fd5b50565b6115eb8161140e565b81146115f657600080fd5b50565b6116028161141a565b811461160d57600080fd5b50565b61161981611444565b811461162457600080fd5b50565b6116308161144e565b811461163b57600080fd5b5056fea2646970667358221220d05b2cf25e28e4e97ad03ab5099bb3761815ed1ec7cabc67cb3c57deb496c37d64736f6c6343000804003360806040523480156200001157600080fd5b506040518060400160405280600381526020017f44434e00000000000000000000000000000000000000000000000000000000008152506040518060400160405280600c81526020017f446563656e7472614e616d650000000000000000000000000000000000000000815250816000908051906020019062000096929190620001a6565b508060019080519060200190620000af929190620001a6565b505050620000d2620000c6620000d860201b60201c565b620000e060201b60201c565b620002bb565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001b49062000256565b90600052602060002090601f016020900481019282620001d8576000855562000224565b82601f10620001f357805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022357825182559160200191906001019062000206565b5b50905062000233919062000237565b5090565b5b808211156200025257600081600090555060010162000238565b5090565b600060028204905060018216806200026f57607f821691505b602082108114156200028657620002856200028c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b612e2880620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b857806395d89b411161007c57806395d89b411461034a578063a22cb46514610368578063b88d4fde14610384578063c87b56dd146103a0578063e985e9c5146103d0578063f2fde38b1461040057610137565b806370a08231146102ba578063715018a6146102ea57806379c65068146102f45780637b47ec1a146103105780638da5cb5b1461032c57610137565b806323b872dd116100ff57806323b872dd146101f25780633b0468b61461020e57806342842e0e1461023e578063430c20811461025a5780636352211e1461028a57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba5780631072cbea146101d6575b600080fd5b61015660048036038101906101519190611fbe565b61041c565b60405161016391906123a1565b60405180910390f35b6101746105e5565b60405161018191906123bc565b60405180910390f35b6101a4600480360381019061019f9190612010565b610677565b6040516101b1919061233a565b60405180910390f35b6101d460048036038101906101cf9190611f82565b6106fc565b005b6101f060048036038101906101eb9190611f82565b610814565b005b61020c60048036038101906102079190611e7c565b6108ad565b005b61022860048036038101906102239190612010565b61090d565b60405161023591906123a1565b60405180910390f35b61025860048036038101906102539190611e7c565b61091f565b005b610274600480360381019061026f9190611f82565b61093f565b60405161028191906123a1565b60405180910390f35b6102a4600480360381019061029f9190612010565b610953565b6040516102b1919061233a565b60405180910390f35b6102d460048036038101906102cf9190611e17565b610965565b6040516102e191906125be565b60405180910390f35b6102f2610a1d565b005b61030e60048036038101906103099190611f82565b610aa5565b005b61032a60048036038101906103259190612010565b610b2f565b005b610334610bb7565b604051610341919061233a565b60405180910390f35b610352610be1565b60405161035f91906123bc565b60405180910390f35b610382600480360381019061037d9190611f46565b610c73565b005b61039e60048036038101906103999190611ecb565b610df4565b005b6103ba60048036038101906103b59190612010565b610e56565b6040516103c791906123bc565b60405180910390f35b6103ea60048036038101906103e59190611e40565b610efd565b6040516103f791906123a1565b60405180910390f35b61041a60048036038101906104159190611e17565b610f91565b005b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105de57507fb88d4fde60196325a28bb7f99a2582e0b46de55b18761e960c14ad7a320994657f42842e0eb38857a7775b4e7364b2775df7325074d088e7fb39590cd6281184ed7f23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b7fe985e9c5c6636c6879256001057b28ccac7718ef0ac56553ff9b926452cab8a37fa22cb4651ab9570f89bb516380c40ce76762284fb1f21337ceaf6adab99e7d4a7f081812fc55e34fdc7cf5d8b5cf4e3621fa6423fde952ec6ab24afdc0d85c0b2e7f095ea7b334ae44009aa867bfb386f5c3b4b443ac6f0ee573fa91c4608fbadfba7f6352211e6566aa027e75ac9dbf2423197fbd9b82b9d981a3ab367d355866aa1c7f70a08231b98ef4ca268c9cc3f6b4590e4bfec28280db06bb5d45e689f2a360be18181818181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600080546105f4906127e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610620906127e3565b801561066d5780601f106106425761010080835404028352916020019161066d565b820191906000526020600020905b81548152906001019060200180831161065057829003601f168201915b5050505050905090565b600061068282611089565b6106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b8906124fe565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610707826110f5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f9061257e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107976111a7565b73ffffffffffffffffffffffffffffffffffffffff1614806107c657506107c5816107c06111a7565b610efd565b5b610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc9061247e565b60405180910390fd5b61080f83836111af565b505050565b61081c6111a7565b73ffffffffffffffffffffffffffffffffffffffff1661083a610bb7565b73ffffffffffffffffffffffffffffffffffffffff1614610890576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108879061251e565b60405180910390fd5b600061089b826110f5565b90506108a881848461091f565b505050565b6108be6108b86111a7565b82611268565b6108fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f49061259e565b60405180910390fd5b6109088383836112fd565b505050565b600061091882611089565b9050919050565b61093a83838360405180602001604052806000815250610df4565b505050565b600061094b8383611268565b905092915050565b600061095e826110f5565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd9061249e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a256111a7565b73ffffffffffffffffffffffffffffffffffffffff16610a43610bb7565b73ffffffffffffffffffffffffffffffffffffffff1614610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a909061251e565b60405180910390fd5b610aa36000611559565b565b610aad6111a7565b73ffffffffffffffffffffffffffffffffffffffff16610acb610bb7565b73ffffffffffffffffffffffffffffffffffffffff1614610b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b189061251e565b60405180910390fd5b610b2b828261161f565b5050565b610b376111a7565b73ffffffffffffffffffffffffffffffffffffffff16610b55610bb7565b73ffffffffffffffffffffffffffffffffffffffff1614610bab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba29061251e565b60405180910390fd5b610bb48161163d565b50565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610bf0906127e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1c906127e3565b8015610c695780601f10610c3e57610100808354040283529160200191610c69565b820191906000526020600020905b815481529060010190602001808311610c4c57829003601f168201915b5050505050905090565b610c7b6111a7565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce09061245e565b60405180910390fd5b8060056000610cf66111a7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610da36111a7565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610de891906123a1565b60405180910390a35050565b610e05610dff6111a7565b83611268565b610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b9061259e565b60405180910390fd5b610e508484848461174e565b50505050565b6060610e6182611089565b610ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e979061255e565b60405180910390fd5b6000610eaa6117aa565b90506000815111610eca5760405180602001604052806000815250610ef5565b80610ed4846117c1565b604051602001610ee5929190612316565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610f996111a7565b73ffffffffffffffffffffffffffffffffffffffff16610fb7610bb7565b73ffffffffffffffffffffffffffffffffffffffff161461100d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110049061251e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561107d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611074906123fe565b60405180910390fd5b61108681611559565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561119e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611195906124be565b60405180910390fd5b80915050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611222836110f5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061127483610953565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806112e357508373ffffffffffffffffffffffffffffffffffffffff166112cb84610677565b73ffffffffffffffffffffffffffffffffffffffff16145b806112f457506112f38185610efd565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661131d826110f5565b73ffffffffffffffffffffffffffffffffffffffff1614611373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136a9061253e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113da9061243e565b60405180910390fd5b6113ee83838361196e565b6113f96000826111af565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461144991906126f9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114a09190612672565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611639828260405180602001604052806000815250611973565b5050565b6000611648826110f5565b90506116568160008461196e565b6116616000836111af565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116b191906126f9565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6117598484846112fd565b611765848484846119ce565b6117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179b906123de565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415611809576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611969565b600082905060005b6000821461183b57808061182490612846565b915050600a8261183491906126c8565b9150611811565b60008167ffffffffffffffff81111561187d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156118af5781602001600182028036833780820191505090505b5090505b60008514611962576001826118c891906126f9565b9150600a856118d7919061288f565b60306118e39190612672565b60f81b81838151811061191f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561195b91906126c8565b94506118b3565b8093505050505b919050565b505050565b61197d8383611b65565b61198a60008484846119ce565b6119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c0906123de565b60405180910390fd5b505050565b60006119ef8473ffffffffffffffffffffffffffffffffffffffff16611d33565b15611b58578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a186111a7565b8786866040518563ffffffff1660e01b8152600401611a3a9493929190612355565b602060405180830381600087803b158015611a5457600080fd5b505af1925050508015611a8557506040513d601f19601f82011682018060405250810190611a829190611fe7565b60015b611b08573d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b50600081511415611b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af7906123de565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b5d565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcc906124de565b60405180910390fd5b611bde81611089565b15611c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c159061241e565b60405180910390fd5b611c2a6000838361196e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c7a9190612672565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b6000611d59611d54846125fe565b6125d9565b905082815260208101848484011115611d7157600080fd5b611d7c8482856127a1565b509392505050565b600081359050611d9381612d96565b92915050565b600081359050611da881612dad565b92915050565b600081359050611dbd81612dc4565b92915050565b600081519050611dd281612dc4565b92915050565b600082601f830112611de957600080fd5b8135611df9848260208601611d46565b91505092915050565b600081359050611e1181612ddb565b92915050565b600060208284031215611e2957600080fd5b6000611e3784828501611d84565b91505092915050565b60008060408385031215611e5357600080fd5b6000611e6185828601611d84565b9250506020611e7285828601611d84565b9150509250929050565b600080600060608486031215611e9157600080fd5b6000611e9f86828701611d84565b9350506020611eb086828701611d84565b9250506040611ec186828701611e02565b9150509250925092565b60008060008060808587031215611ee157600080fd5b6000611eef87828801611d84565b9450506020611f0087828801611d84565b9350506040611f1187828801611e02565b925050606085013567ffffffffffffffff811115611f2e57600080fd5b611f3a87828801611dd8565b91505092959194509250565b60008060408385031215611f5957600080fd5b6000611f6785828601611d84565b9250506020611f7885828601611d99565b9150509250929050565b60008060408385031215611f9557600080fd5b6000611fa385828601611d84565b9250506020611fb485828601611e02565b9150509250929050565b600060208284031215611fd057600080fd5b6000611fde84828501611dae565b91505092915050565b600060208284031215611ff957600080fd5b600061200784828501611dc3565b91505092915050565b60006020828403121561202257600080fd5b600061203084828501611e02565b91505092915050565b6120428161272d565b82525050565b6120518161273f565b82525050565b60006120628261262f565b61206c8185612645565b935061207c8185602086016127b0565b6120858161297c565b840191505092915050565b600061209b8261263a565b6120a58185612656565b93506120b58185602086016127b0565b6120be8161297c565b840191505092915050565b60006120d48261263a565b6120de8185612667565b93506120ee8185602086016127b0565b80840191505092915050565b6000612107603283612656565b91506121128261298d565b604082019050919050565b600061212a602683612656565b9150612135826129dc565b604082019050919050565b600061214d601c83612656565b915061215882612a2b565b602082019050919050565b6000612170602483612656565b915061217b82612a54565b604082019050919050565b6000612193601983612656565b915061219e82612aa3565b602082019050919050565b60006121b6603883612656565b91506121c182612acc565b604082019050919050565b60006121d9602a83612656565b91506121e482612b1b565b604082019050919050565b60006121fc602983612656565b915061220782612b6a565b604082019050919050565b600061221f602083612656565b915061222a82612bb9565b602082019050919050565b6000612242602c83612656565b915061224d82612be2565b604082019050919050565b6000612265602083612656565b915061227082612c31565b602082019050919050565b6000612288602983612656565b915061229382612c5a565b604082019050919050565b60006122ab602f83612656565b91506122b682612ca9565b604082019050919050565b60006122ce602183612656565b91506122d982612cf8565b604082019050919050565b60006122f1603183612656565b91506122fc82612d47565b604082019050919050565b61231081612797565b82525050565b600061232282856120c9565b915061232e82846120c9565b91508190509392505050565b600060208201905061234f6000830184612039565b92915050565b600060808201905061236a6000830187612039565b6123776020830186612039565b6123846040830185612307565b81810360608301526123968184612057565b905095945050505050565b60006020820190506123b66000830184612048565b92915050565b600060208201905081810360008301526123d68184612090565b905092915050565b600060208201905081810360008301526123f7816120fa565b9050919050565b600060208201905081810360008301526124178161211d565b9050919050565b6000602082019050818103600083015261243781612140565b9050919050565b6000602082019050818103600083015261245781612163565b9050919050565b6000602082019050818103600083015261247781612186565b9050919050565b60006020820190508181036000830152612497816121a9565b9050919050565b600060208201905081810360008301526124b7816121cc565b9050919050565b600060208201905081810360008301526124d7816121ef565b9050919050565b600060208201905081810360008301526124f781612212565b9050919050565b6000602082019050818103600083015261251781612235565b9050919050565b6000602082019050818103600083015261253781612258565b9050919050565b600060208201905081810360008301526125578161227b565b9050919050565b600060208201905081810360008301526125778161229e565b9050919050565b60006020820190508181036000830152612597816122c1565b9050919050565b600060208201905081810360008301526125b7816122e4565b9050919050565b60006020820190506125d36000830184612307565b92915050565b60006125e36125f4565b90506125ef8282612815565b919050565b6000604051905090565b600067ffffffffffffffff8211156126195761261861294d565b5b6126228261297c565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061267d82612797565b915061268883612797565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126bd576126bc6128c0565b5b828201905092915050565b60006126d382612797565b91506126de83612797565b9250826126ee576126ed6128ef565b5b828204905092915050565b600061270482612797565b915061270f83612797565b925082821015612722576127216128c0565b5b828203905092915050565b600061273882612777565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156127ce5780820151818401526020810190506127b3565b838111156127dd576000848401525b50505050565b600060028204905060018216806127fb57607f821691505b6020821081141561280f5761280e61291e565b5b50919050565b61281e8261297c565b810181811067ffffffffffffffff8211171561283d5761283c61294d565b5b80604052505050565b600061285182612797565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612884576128836128c0565b5b600182019050919050565b600061289a82612797565b91506128a583612797565b9250826128b5576128b46128ef565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612d9f8161272d565b8114612daa57600080fd5b50565b612db68161273f565b8114612dc157600080fd5b50565b612dcd8161274b565b8114612dd857600080fd5b50565b612de481612797565b8114612def57600080fd5b5056fea2646970667358221220331f1834f74487c5d042c91f709ec7d353036feed8472be1383e2bc7237dbe0064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461018b578063ba6c1418146101a9578063da8c229e146101c5578063e0dba60f146101f5578063f2fde38b14610211578063fae007421461022d576100b4565b80633b0468b6146100b9578063430c2081146100e95780636352211e14610119578063715018a61461014957806379c65068146101535780637b47ec1a1461016f575b600080fd5b6100d360048036038101906100ce9190611039565b61024b565b6040516100e09190611220565b60405180910390f35b61010360048036038101906100fe9190610f4b565b6102ff565b6040516101109190611220565b60405180910390f35b610133600480360381019061012e9190611039565b6103b6565b60405161014091906111dc565b60405180910390f35b61015161046a565b005b61016d60048036038101906101689190610f4b565b6104f2565b005b61018960048036038101906101849190611039565b610611565b005b61019361072d565b6040516101a091906111dc565b60405180910390f35b6101c360048036038101906101be9190610f87565b610756565b005b6101df60048036038101906101da9190610ebd565b610afb565b6040516101ec9190611220565b60405180910390f35b61020f600480360381019061020a9190610f0f565b610b1b565b005b61022b60048036038101906102269190610ebd565b610c40565b005b610235610d38565b604051610242919061130a565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b0468b6836040518263ffffffff1660e01b81526004016102a891906113c5565b60206040518083038186803b1580156102c057600080fd5b505afa1580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f89190611010565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663430c208184846040518363ffffffff1660e01b815260040161035e9291906111f7565b60206040518083038186803b15801561037657600080fd5b505afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae9190611010565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161041391906113c5565b60206040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190610ee6565b9050919050565b610472610d5e565b73ffffffffffffffffffffffffffffffffffffffff1661049061072d565b73ffffffffffffffffffffffffffffffffffffffff16146104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90611385565b60405180910390fd5b6104f06000610d66565b565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611365565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c6506883836040518363ffffffff1660e01b81526004016105db9291906111f7565b600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069490611365565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b47ec1a826040518263ffffffff1660e01b81526004016106f891906113c5565b600060405180830381600087803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d990611365565b60405180910390fd5b600046905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600c81526020017f646563656e7472616e616d650000000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525080519060200120843060405160200161089a959493929190611272565b60405160208183030381529060405280519060200120905060007fd40888cf67bae62548289d766b50d28607cfd4eda4d7664f5e6de8517148524489896040516020016108e99392919061123b565b604051602081830303815290604052805190602001209050600082826040516020016109169291906111a5565b60405160208183030381529060405280519060200120905060006001828a8a8a6040516000815260200160405260405161095394939291906112c5565b6020604051602081039080840390855afa158015610975573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e6906113a5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5690611325565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631072cbea8c8c6040518363ffffffff1660e01b8152600401610abc9291906111f7565b600060405180830381600087803b158015610ad657600080fd5b505af1158015610aea573d6000803e3d6000fd5b505050505050505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b610b23610d5e565b73ffffffffffffffffffffffffffffffffffffffff16610b4161072d565b73ffffffffffffffffffffffffffffffffffffffff1614610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e90611385565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf8782604051610c349190611220565b60405180910390a25050565b610c48610d5e565b73ffffffffffffffffffffffffffffffffffffffff16610c6661072d565b73ffffffffffffffffffffffffffffffffffffffff1614610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390611385565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2390611345565b60405180910390fd5b610d3581610d66565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610e39816115cb565b92915050565b600081519050610e4e816115cb565b92915050565b600081359050610e63816115e2565b92915050565b600081519050610e78816115e2565b92915050565b600081359050610e8d816115f9565b92915050565b600081359050610ea281611610565b92915050565b600081359050610eb781611627565b92915050565b600060208284031215610ecf57600080fd5b6000610edd84828501610e2a565b91505092915050565b600060208284031215610ef857600080fd5b6000610f0684828501610e3f565b91505092915050565b60008060408385031215610f2257600080fd5b6000610f3085828601610e2a565b9250506020610f4185828601610e54565b9150509250929050565b60008060408385031215610f5e57600080fd5b6000610f6c85828601610e2a565b9250506020610f7d85828601610e93565b9150509250929050565b60008060008060008060c08789031215610fa057600080fd5b6000610fae89828a01610e2a565b9650506020610fbf89828a01610e93565b9550506040610fd089828a01610ea8565b9450506060610fe189828a01610e7e565b9350506080610ff289828a01610e7e565b92505060a061100389828a01610e2a565b9150509295509295509295565b60006020828403121561102257600080fd5b600061103084828501610e69565b91505092915050565b60006020828403121561104b57600080fd5b600061105984828501610e93565b91505092915050565b61106b816113fc565b82525050565b61107a8161140e565b82525050565b6110898161141a565b82525050565b6110a061109b8261141a565b61147f565b82525050565b6110af8161145b565b82525050565b60006110c26018836113e0565b91506110cd82611489565b602082019050919050565b60006110e56026836113e0565b91506110f0826114b2565b604082019050919050565b60006111086002836113f1565b915061111382611501565b600282019050919050565b600061112b6028836113e0565b91506111368261152a565b604082019050919050565b600061114e6020836113e0565b915061115982611579565b602082019050919050565b60006111716020836113e0565b915061117c826115a2565b602082019050919050565b61119081611444565b82525050565b61119f8161144e565b82525050565b60006111b0826110fb565b91506111bc828561108f565b6020820191506111cc828461108f565b6020820191508190509392505050565b60006020820190506111f16000830184611062565b92915050565b600060408201905061120c6000830185611062565b6112196020830184611187565b9392505050565b60006020820190506112356000830184611071565b92915050565b60006060820190506112506000830186611080565b61125d6020830185611062565b61126a6040830184611187565b949350505050565b600060a0820190506112876000830188611080565b6112946020830187611080565b6112a16040830186611080565b6112ae6060830185611187565b6112bb6080830184611062565b9695505050505050565b60006080820190506112da6000830187611080565b6112e76020830186611196565b6112f46040830185611080565b6113016060830184611080565b95945050505050565b600060208201905061131f60008301846110a6565b92915050565b6000602082019050818103600083015261133e816110b5565b9050919050565b6000602082019050818103600083015261135e816110d8565b9050919050565b6000602082019050818103600083015261137e8161111e565b9050919050565b6000602082019050818103600083015261139e81611141565b9050919050565b600060208201905081810360008301526113be81611164565b9050919050565b60006020820190506113da6000830184611187565b92915050565b600082825260208201905092915050565b600081905092915050565b600061140782611424565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006114668261146d565b9050919050565b600061147882611424565b9050919050565b6000819050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60008201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f7472616e73666572546f6b656e3a20696e76616c6964207369676e6174757265600082015250565b6115d4816113fc565b81146115df57600080fd5b50565b6115eb8161140e565b81146115f657600080fd5b50565b6116028161141a565b811461160d57600080fd5b50565b61161981611444565b811461162457600080fd5b50565b6116308161144e565b811461163b57600080fd5b5056fea2646970667358221220d05b2cf25e28e4e97ad03ab5099bb3761815ed1ec7cabc67cb3c57deb496c37d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 760,
        "contract": "contracts/decentraname/DecentraNameController.sol:DecentraNameController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19431,
        "contract": "contracts/decentraname/DecentraNameController.sol:DecentraNameController",
        "label": "controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3651,
        "contract": "contracts/decentraname/DecentraNameController.sol:DecentraNameController",
        "label": "decentraName",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(DecentraName)3639"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DecentraName)3639": {
        "encoding": "inplace",
        "label": "contract DecentraName",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}